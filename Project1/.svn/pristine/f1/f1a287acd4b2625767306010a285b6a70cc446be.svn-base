package com.bootdo.sales.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipOutputStream;

import javax.servlet.http.HttpServletResponse;

import org.apache.catalina.servlet4preview.http.HttpServletRequest;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.bootdo.sales.domain.CompanyCustomerDO;
import com.bootdo.sales.domain.RecordServiceDO;
import com.bootdo.sales.service.RecordServiceService;

//import javafx.scene.control.Alert;

import com.bootdo.common.config.BootdoConfig;
import com.bootdo.common.controller.BaseController;
import com.bootdo.common.domain.DictDO;
import com.bootdo.common.domain.FileDO;
import com.bootdo.common.domain.MainCopyPersonDO;
import com.bootdo.common.service.FileService;
import com.bootdo.common.service.MainCopyPersonService;
import com.bootdo.common.utils.FileType;
import com.bootdo.common.utils.FileUtil;
import com.bootdo.common.utils.PageUtils;
import com.bootdo.common.utils.Query;
import com.bootdo.common.utils.R;
import com.bootdo.common.utils.ZipUtils;

/**
 * 客服记录信息表
 * 
 * @author chglee
 * @email 1992lcg@163.com
 * @date 2017-11-28 09:25:19
 */
@Controller
@RequestMapping("/sales/recordService")
public class RecordServiceController extends BaseController {
	@Autowired
	private FileService sysFileService;
	@Autowired
	private RecordServiceService recordServiceService;
	@Autowired
	private BootdoConfig bootdoConfig;
	@Autowired
	private MainCopyPersonService mainCopyPersonService;

	@GetMapping()
	@RequiresPermissions("sales:recordService:recordService")
	String RecordService() {
		return "sales/recordService/recordService";
	}

	@ResponseBody
	@GetMapping("/list")
	@RequiresPermissions("sales:recordService:recordService")
	public PageUtils list(@RequestParam Map<String, Object> params,HttpServletRequest request) {
		// 查询列表数据
		params.put("serviceRecorder", getUserId());
		params.put("Identification", (getIdentification()));
		params.put("userName", (getUsername()));
		if (params.get("deliveryContent") != null && params.get("deliveryContent") != "") {
			params.put("deliveryContent", "%" + params.get("deliveryContent") + "%");
		}
		if (params.get("timeMin") != null && params.get("timeMin") != "") {
			params.put("timeMin", params.get("timeMin") + " 00:00:00");
		}
		if (params.get("timeMax") != null && params.get("timeMax") != "") {
			params.put("timeMax", params.get("timeMax") + " 23:59:59");
		}
		if (params.get("saleEmployee") != null && params.get("saleEmployee") != "") {
			params.put("saleEmployee", "%" + params.get("saleEmployee") + "%");
		}
		if (params.get("saleManager") != null && params.get("saleManager") != "") {
			params.put("saleManager", "%" + params.get("saleManager") + "%");
		}
		if (params.get("customerPhoneNumber") != null && params.get("customerPhoneNumber") != "") {
			params.put("customerPhoneNumber", "%" + params.get("customerPhoneNumber") + "%");
		}
		if (params.get("serverName") != null && params.get("serverName") != "") {
			params.put("serverName", "%" + params.get("serverName") + "%");
		}

		// 排序方式
		String orders = request.getParameter("sortOrder");
		params.put("order", orders);
		// 排序字段
		String sortnames = request.getParameter("sortName");
		params.put("sort", sortnames);

		Query query = new Query(params);
		List<RecordServiceDO> recordServiceList = recordServiceService.list(query);
		int total = recordServiceService.count(query);
		PageUtils pageUtils = new PageUtils(recordServiceList, total);
		return pageUtils;
	}

	@GetMapping("/add")
	@RequiresPermissions("sales:recordService:add")
	String add() {
		return "sales/recordService/add";
	}

	@GetMapping("/import")
	@RequiresPermissions("sales:recordService:dataImport")
	String importFile() {
		return "sales/recordService/import";
	}

	// edit数据绑定
	@RequestMapping("/edit_ajax/{serviceId}")
	@ResponseBody
	Map<String, Object> edit_ajax(@PathVariable("serviceId") String serviceId) {
		RecordServiceDO service = recordServiceService.get(serviceId);
		Map<String, Object> returnData = new HashMap<String, Object>();
		returnData.put("service", service);
		return returnData;
	}

	@GetMapping("/edit/{serviceId}")
	@RequiresPermissions("sales:recordService:edit")
	String edit(@PathVariable("serviceId") String serviceId, Model model) {
		model.addAttribute("serviceId", serviceId);
		return "sales/recordService/edit";
	}

	/**
	 * 保存
	 */
	@ResponseBody
	@PostMapping("/save")
	@RequiresPermissions("sales:recordService:add")
	public R save(RecordServiceDO recordService) {
		recordService.setServiceRecorder(getUserId());
		int serviceIds = recordServiceService.save(recordService);
		if (serviceIds > 0) {
			MainCopyPersonDO mcp = new MainCopyPersonDO();
			String mainPersonId = recordService.getMainPersonId();
			if (!"".equals(mainPersonId)) {
				String mainPersonIdArray[] = mainPersonId.split(",");
				for (int i = 0; i < mainPersonIdArray.length; i++) {
					mcp.setTId(recordService.getServiceId());
					mcp.setMainPerson(1);
					mcp.setEmployeeId(mainPersonIdArray[i]);
					mcp.setOperator(getUserId());
					mcp.setTableName("sales_record_service");
					mainCopyPersonService.save(mcp);

				}
			}
			String copyPersonId = recordService.getCopyPersonId();
			if (!"".equals(copyPersonId)) {
				String copyPersonIdArray[] = copyPersonId.split(",");
				for (int i = 0; i < copyPersonIdArray.length; i++) {
					mcp.setTId(recordService.getServiceId());
					mcp.setMainPerson(0);
					mcp.setEmployeeId(copyPersonIdArray[i]);
					mcp.setOperator(getUserId());
					mcp.setTableName("sales_record_service");
					mainCopyPersonService.save(mcp);
				}

			}
			R r = R.ok();
			r.put("serviceId", serviceIds);
			return r;
		}
		return R.error();
	}

	/**
	 * 查看信息
	 */
	@GetMapping("/examine/{serviceId}")
	@RequiresPermissions("sales:recordService:recordService")
	String examine(@PathVariable("serviceId") String serviceId, Model model) {
		model.addAttribute("serviceId", serviceId);
		return "/sales/recordService/examineRecordService";
	}

	/**
	 * 修改
	 */
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("sales:recordService:edit")
	public R update(RecordServiceDO recordService) {
		String serviceIds = recordService.getServiceId();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("offset", 1);
		params.put("limit", 2);
		params.put("tId", serviceIds);
		params.put("tableName", "sales_record_service");
		recordService.setServiceRecorder(getUserId());
		recordServiceService.update(recordService);
		mainCopyPersonService.remove(params);
		if (!serviceIds.equals("")) {
			MainCopyPersonDO mcp = new MainCopyPersonDO();
			String mainPersonId = recordService.getMainPersonId();
			if (!"".equals(mainPersonId)) {
				String mainPersonIdArray[] = mainPersonId.split(",");

				for (int i = 0; i < mainPersonIdArray.length; i++) {
					mcp.setTId(recordService.getServiceId());
					mcp.setMainPerson(1);
					mcp.setEmployeeId(mainPersonIdArray[i]);
					mcp.setOperator(getUserId());
					mcp.setTableName("sales_record_service");
					mainCopyPersonService.save(mcp);

				}
			}

			String copyPersonId = recordService.getCopyPersonId();
			if (!"".equals(copyPersonId)) {
				String copyPersonIdArray[] = copyPersonId.split(",");
				int result = 0;
				for (int i = 0; i < copyPersonIdArray.length; i++) {
					mcp.setTId(recordService.getServiceId());
					mcp.setMainPerson(0);
					mcp.setEmployeeId(copyPersonIdArray[i]);
					mcp.setOperator(getUserId());
					mcp.setTableName("sales_record_service");
					mainCopyPersonService.save(mcp);

				}
			}

		}
		return R.ok();
	}

	/**
	 * 执行删除文件的时候同时删除Customer_Attachment字段下的附件ID
	 */
	// @ResponseBody
	// @RequestMapping("/updateRecordAttachment")
	// @RequiresPermissions("sales:recordService:edit")
	// public R updateRecordAttachment(RecordServiceDO recordService) {
	// recordServiceService.updateRecordAttachment(recordService);
	// return R.ok();
	// }
	/**
	 * 删除
	 */
	@PostMapping("/remove")
	@ResponseBody
	@RequiresPermissions("sales:recordService:remove")
	public R remove(String serviceId) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("offset", 1);
		params.put("limit", 2);
		params.put("tId", serviceId);
		params.put("tableName", "sales_record_service");
		if (recordServiceService.remove(serviceId) > 0) {
			mainCopyPersonService.remove(params);
			return R.ok();
		}
		return R.error();
	}

	/**
	 * 删除
	 */
	@PostMapping("/batchRemove")
	@ResponseBody
	@RequiresPermissions("sales:recordService:batchRemove")
	public R remove(@RequestParam("ids[]") String[] serviceIds) {
		recordServiceService.batchRemove(serviceIds);
		return R.ok();
	}

	/**
	 * 查询列表数据
	 */
	@ResponseBody
	@GetMapping("/listDic")
	public List<DictDO> listByType() {
		Map<String, Object> map = new HashMap<>(16);
		map.put("type", "");
		List<DictDO> dictList = recordServiceService.listDic();
		return dictList;
	}

	@ResponseBody
	@GetMapping("/listDicxmbh")
	public List<DictDO> listByType1() {
		// 查询列表数据
		Map<String, Object> map = new HashMap<>(16);
		map.put("type", "");
		List<DictDO> dictList = recordServiceService.listDicxmbh();
		return dictList;
	}

	// 根据ID查看附件列表
	@ResponseBody
	@GetMapping("/listRecordAttachment")
	@RequiresPermissions("common:sysFile:sysFile")
	public PageUtils listRecordAttachment(@RequestParam("serviceId") String serviceId,
			@RequestParam Map<String, Object> params) {
		// String aa=request.getParameter("customerId");
		params.put("serviceId", serviceId);
		// 查询列表数据
		Query query = new Query(params);
		List<FileDO> sysFileList = sysFileService.listRecordAttachment(query);
		int total = sysFileService.countRecordAttachment(query);
		PageUtils pageUtils = new PageUtils(sysFileList, total);
		return pageUtils;
	}

	/**
	 * 上传文件
	 * 
	 * @param file
	 * @param request
	 * @return
	 */
	@ResponseBody
	@PostMapping("/upload")
	R upload(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
		String fileName = file.getOriginalFilename();
		// fileName = FileUtil.renameToUUID(fileName);
		FileDO sysFile = new FileDO(FileType.fileType(fileName), "/files/" + fileName, new Date(), fileName);
		try {
			FileUtil.uploadFile(file.getBytes(), bootdoConfig.getUploadPath(), fileName);
		} catch (Exception e) {
			return R.error();
		}
		int ids = sysFileService.save(sysFile);
		System.out.println(ids);
		if (ids > 0) {
			R r = R.ok();
			r.put("serviceAttachment", ids);
			r.put("fileName", sysFile.getUrl());
			return r;
			// return R.ok().put("fileName", sysFile.getUrl());
		}
		return R.error();
	}

	/**
	 * 导入文件
	 */
	@ResponseBody
	@PostMapping("/dataImport")
	@RequiresPermissions("sales:recordService:dataImport")
	R dataImport(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
		String fileName = file.getOriginalFilename();
		fileName = FileUtil.renameToUUID(fileName);
		File datafile = null;
		try {
			FileUtil.uploadFile(file.getBytes(), bootdoConfig.getUploadPath(), fileName);
			datafile = new File(bootdoConfig.getUploadPath() + fileName);

			long userid = getUserId(); // log数据保存 用户id
			recordServiceService.dataImport(datafile, userid);
		} catch (Exception e) {
			return R.error();
		}

		return R.ok();
	}

	// 根据ID查看附件列表
	@ResponseBody
	@GetMapping("/listRecordServiceId")
	@RequiresPermissions("common:sysFile:sysFile")
	public PageUtils listId(@RequestParam("serviceId") String serviceId, @RequestParam Map<String, Object> params) {
		// String aa=request.getParameter("customerId");
		params.put("serviceId", serviceId);
		// 查询列表数据
		Query query = new Query(params);
		List<FileDO> sysFileList = sysFileService.listRecordServiceAttachment(query);
		int total = sysFileService.listRecordServiceAttachmentCount(query);
		PageUtils pageUtils = new PageUtils(sysFileList, total);
		return pageUtils;
	}

	/**
	 * 执行删除文件的时候同时删除字段下的附件ID
	 */
	@ResponseBody
	@RequestMapping("/updateRecordServiceAttachment")
	@RequiresPermissions("sales:recordService:edit")
	public R updateRecordServiceAttachment(RecordServiceDO recordService) {
		recordServiceService.updateRecordServiceAttachment(recordService);
		return R.ok();
	}

	// 根据文件名称下载相关代码
	@ResponseBody
	@RequestMapping("/down")
	public void download(HttpServletResponse response, @RequestParam("fileName") String fileName) {
		try {
			// path是指欲下载的文件的路径。
			String path = "C:/var/uploaded_files/" + fileName;

			File file = new File(path);
			// 取得文件名。
			String filename = file.getName();

			// 以流的形式下载文件。
			InputStream fis = new BufferedInputStream(new FileInputStream(path));
			byte[] buffer = new byte[fis.available()];
			fis.read(buffer);
			fis.close();
			// 清空response
			response.reset();
			// 设置response的Header
			// 设置文件名

			response.addHeader("Content-Disposition",
					"attachment;filename=" + new String(filename.getBytes(), "ISO-8859-1"));
			// 设置文件打下
			response.addHeader("Content-Length", "" + file.length());
			OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
			response.setContentType("application/octet-stream");
			toClient.write(buffer);
			toClient.flush();
			toClient.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}

	/**
	 * 打包压缩下载文件
	 */
	@RequestMapping(value = "/downLoadZipFile")
	@ResponseBody
	public void downLoadZipFile(HttpServletResponse response, @RequestParam("id") String id) throws IOException {
		String[] ids = id.split(",");
		String zipName = "downLoadFile.zip";
		List<FileDO> fileList = sysFileService.downLoadListId(ids);// 查询数据库中记录
		response.setContentType("APPLICATION/OCTET-STREAM");
		response.setHeader("Content-Disposition", "attachment; filename=" + zipName);
		ZipOutputStream out = new ZipOutputStream(response.getOutputStream());
		try {
			for (Iterator<FileDO> it = fileList.iterator(); it.hasNext();) {
				FileDO file = it.next();
				ZipUtils.doCompress("C:/var/uploaded_files/" + file.getFileName(), out);
				response.flushBuffer();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			out.close();
		}
	}

	// 模板下载
	@ResponseBody
	@RequestMapping("/downloadTemplate")
	public void download(HttpServletResponse response, HttpServletRequest request) {
		try {

			// File files = new
			// File(".\\src\\main\\resources\\downloadTemplate\\企业客户导入摸板.xls");
			// System.out.println("getAbsolutePath:"+files.getAbsolutePath());
			// //getAbsolutePath()会将.认为是一个以.命名的文件
			// System.out.println("getCanonicalPath:"+files.getCanonicalPath());//getCanonicalPath()得到的是一个规范路径没有.
			//

			File file = new File("./src/main/resources/downloadTemplate/客服记录导入模板.xls");
			// 取得文件名。
			String filename = file.getName();

			// 以流的形式下载文件。
			InputStream fis = new BufferedInputStream(new FileInputStream(file.getCanonicalPath()));
			byte[] buffer = new byte[fis.available()];
			fis.read(buffer);
			fis.close();
			// 清空response
			response.reset();
			// 设置response的Header
			// 设置文件名
			response.addHeader("Content-Disposition",
					"attachment;filename=" + new String(filename.getBytes(), "ISO-8859-1"));
			// 设置文件打下
			response.addHeader("Content-Length", "" + file.length());
			OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
			response.setContentType("application/octet-stream");
			toClient.write(buffer);
			toClient.flush();
			toClient.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}

}

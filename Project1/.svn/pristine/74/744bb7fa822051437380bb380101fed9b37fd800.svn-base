package com.bootdo.sales.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipOutputStream;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import org.apache.catalina.servlet4preview.http.HttpServletRequest;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.bootdo.sales.domain.BusinessDO;
import com.bootdo.sales.domain.CompanyCustomerDO;
import com.bootdo.sales.domain.RecordComplaintDO;
import com.bootdo.sales.domain.RecordServiceDO;
import com.bootdo.sales.service.RecordComplaintService;
import com.bootdo.common.config.BootdoConfig;
import com.bootdo.common.controller.BaseController;
import com.bootdo.common.domain.DictDO;
import com.bootdo.common.domain.FileDO;
import com.bootdo.common.domain.MainCopyPersonDO;
import com.bootdo.common.service.FileService;
import com.bootdo.common.service.MainCopyPersonService;
import com.bootdo.common.utils.FileType;
import com.bootdo.common.utils.FileUtil;
import com.bootdo.common.utils.PageUtils;
import com.bootdo.common.utils.Query;
import com.bootdo.common.utils.R;
import com.bootdo.common.utils.ZipUtils;

/**
 * 客户投诉信息表
 * 
 * @author chglee
 * @email 1992lcg@163.com
 * @date 2017-11-28 18:06:03
 */
 
@Controller
@RequestMapping("/sales/recordComplaint")
public class RecordComplaintController extends BaseController {
	@Autowired
	private FileService sysFileService;
	@Autowired
	private BootdoConfig bootdoConfig;
	@Autowired
	private RecordComplaintService recordComplaintService;
	@Autowired
	private MainCopyPersonService mainCopyPersonService;
	@GetMapping()
	@RequiresPermissions("sales:recordComplaint:recordComplaint")
	String RecordComplaint(){
	    return "sales/recordComplaint/recordComplaint";
	}
	
	@ResponseBody
	@GetMapping("/list")
	@RequiresPermissions("sales:recordComplaint:recordComplaint")
	public PageUtils list(@RequestParam Map<String, Object> params){
		//查询列表数据
		params.put("complaintRecorder", (getUserId()));
		params.put("userName", (getUsername()));
		params.put("Identification", (getIdentification()));
		
		if (params.get("deliveryContent") != null && params.get("deliveryContent") != "") {
			params.put("deliveryContent", "%" + params.get("deliveryContent") + "%");
		}
		if (params.get("timeMin") != null && params.get("timeMin") != "") {
			params.put("timeMin", params.get("timeMin") + " 00:00:00");
		}
		if (params.get("timeMax") != null && params.get("timeMax") != "") {
			params.put("timeMax", params.get("timeMax") + " 23:59:59");
		}
		if (params.get("saleEmployee") != null && params.get("saleEmployee") != "") {
			params.put("saleEmployee", "%" + params.get("saleEmployee") + "%");
		}
		if (params.get("saleManager") != null && params.get("saleManager") != "") {
			params.put("saleManager", "%" + params.get("saleManager") + "%");
		}
		if (params.get("customerPhoneNumber") != null && params.get("customerPhoneNumber") != "") {
			params.put("customerPhoneNumber", "%" + params.get("customerPhoneNumber") + "%");
		}
		if (params.get("serverName") != null && params.get("serverName") != "") {
			params.put("serverName", "%" + params.get("serverName") + "%");
		}
		Query query = new Query(params);
		List<RecordComplaintDO> recordComplaintList = recordComplaintService.list(query);
		int total = recordComplaintService.count(query);
		PageUtils pageUtils = new PageUtils(recordComplaintList, total);
		return pageUtils;
	}
	
	@GetMapping("/add")
	@RequiresPermissions("sales:recordComplaint:add")
	String add(){
	    return "sales/recordComplaint/add";
	}
	
	@GetMapping("/import")
	@RequiresPermissions("sales:recordComplaint:dataImport")
	String importFile() {
		return "sales/recordComplaint/import";
	}
	
	// edit数据绑定
	@RequestMapping("/edit_ajax/{complaintId}")
	@ResponseBody
	Map<String, Object> edit_ajax(@PathVariable("complaintId") String complaintId) {
		RecordComplaintDO recordComplaint = recordComplaintService.get(complaintId);
		Map<String, Object> returnData = new HashMap<String, Object>();
		returnData.put("recordComplaint", recordComplaint);
		return returnData;
	}
	
	@GetMapping("/edit/{complaintId}")
	@RequiresPermissions("sales:recordComplaint:edit")
	String edit(@PathVariable("complaintId") String complaintId,Model model){
//		RecordComplaintDO complaintId = recordComplaintService.get(complaintId);
		model.addAttribute("complaintId", complaintId);
	    return "sales/recordComplaint/edit";
	}
	
	/**
	 * 保存（添加）
	 */
	@ResponseBody
	@PostMapping("/save")
	@RequiresPermissions("sales:recordComplaint:add")
	public R save( RecordComplaintDO recordComplaint){
		recordComplaint.setComplaintRecorder(getUserId());
		int complaintIds=recordComplaintService.save(recordComplaint);
		if(complaintIds>0){
			MainCopyPersonDO mcp =new MainCopyPersonDO();
			String mainPersonId = recordComplaint.getMainPersonId();
			if (!"".equals(mainPersonId)) {
				String mainPersonIdArray[] = mainPersonId.split(",");
				for (int i = 0; i < mainPersonIdArray.length; i++) {
					mcp.setTId(recordComplaint.getComplaintId());
					mcp.setMainPerson(1);
					mcp.setEmployeeId(mainPersonIdArray[i]);
					mcp.setOperator(getUserId());
					mcp.setTableName("sales_record_complaint");
					mainCopyPersonService.save(mcp);

				}
			}
			String copyPersonId =recordComplaint.getCopyPersonId();
			if (!"".equals(copyPersonId)) {
				String copyPersonIdArray[] = copyPersonId.split(",");
				for (int i = 0; i < copyPersonIdArray.length; i++) {
					mcp.setTId(recordComplaint.getComplaintId());
					mcp.setMainPerson(0);
					mcp.setEmployeeId(copyPersonIdArray[i]);
					mcp.setOperator(getUserId());
					mcp.setTableName("sales_record_complaint");
					mainCopyPersonService.save(mcp);
				}


			}
			R r = R.ok();
			r.put("complaintId", complaintIds);
			return r;
		}
		return R.error();
	}
	/**
	 * 查看信息
	 */
	@GetMapping("/examine/{complaintId}")
	@RequiresPermissions("sales:recordService:recordService")
	String examine(@PathVariable("complaintId") String complaintId, Model model) {
		model.addAttribute("complaintId", complaintId);
		return "/sales/recordComplaint/examineRecordComplaint";
	}
	/**
	 * 修改
	 */
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("sales:recordComplaint:edit")
	public R update( RecordComplaintDO recordComplaint){
		String complaintIds =recordComplaint.getComplaintId();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("offset",1);
		params.put("limit",2);
		params.put("tId",complaintIds);
		params.put("tableName","sales_record_complaint");
		recordComplaintService.update(recordComplaint);
		mainCopyPersonService.remove(params);
		if (!complaintIds.equals("")) {
			MainCopyPersonDO mcp = new MainCopyPersonDO();
			String mainPersonId = recordComplaint.getMainPersonId();
			if (!"".equals(mainPersonId)) {
				String mainPersonIdArray[] = mainPersonId.split(",");

				for (int i = 0; i < mainPersonIdArray.length; i++) {
					mcp.setTId(recordComplaint.getComplaintId());
					mcp.setMainPerson(1);
					mcp.setEmployeeId(mainPersonIdArray[i]);
					mcp.setOperator(getUserId());
					mcp.setTableName("sales_record_complaint");
					mainCopyPersonService.save(mcp);

				}
			}

			String copyPersonId = recordComplaint.getCopyPersonId();
			if (!"".equals(copyPersonId)) {
				String copyPersonIdArray[] = copyPersonId.split(",");
				int result = 0;
				for (int i = 0; i < copyPersonIdArray.length; i++) {
					mcp.setTId(recordComplaint.getComplaintId());
					mcp.setMainPerson(0);
					mcp.setEmployeeId(copyPersonIdArray[i]);
					mcp.setOperator(getUserId());
					mcp.setTableName("sales_record_complaint");
					mainCopyPersonService.save(mcp);

				}
			}

		}
		return R.ok();
	}
	
	/**
	 * 删除
	 */
	@PostMapping("/remove")
	@ResponseBody
	@RequiresPermissions("sales:recordComplaint:remove")
	public R remove( String complaintId){
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("offset",1);
		params.put("limit",2);
		params.put("tId",complaintId);
		params.put("tableName","sales_record_complaint");
		if(recordComplaintService.remove(complaintId)>0){
			mainCopyPersonService.remove(params);
		return R.ok();
		}
		return R.error();
	}
	
	/**
	 * 删除
	 */
	@PostMapping( "/batchRemove")
	@ResponseBody
	@RequiresPermissions("sales:recordComplaint:batchRemove")
	public R remove(@RequestParam("ids[]") String[] complaintIds){
		recordComplaintService.batchRemove(complaintIds);
		return R.ok();
	}
	
	@ResponseBody
	@GetMapping("/listDic")
	public List<DictDO> listByType() {
		// 查询列表数据
		Map<String, Object> map = new HashMap<>(16);
		map.put("type", "");
		List<DictDO> dictList = recordComplaintService.listDic();
		return dictList;
	}
	
	@ResponseBody
	@GetMapping("/listDicxmbh")
	public List<DictDO> listByType1() {
		// 查询列表数据
		Map<String, Object> map = new HashMap<>(16);
		map.put("type", "");
		List<DictDO> dictList = recordComplaintService.listDicxmbh();
		return dictList;
	}
	
	
	/**
	 * 导入文件
	 */
	@ResponseBody
	@PostMapping("/dataImport")
	R upload2(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
		String fileName = file.getOriginalFilename();
		fileName = FileUtil.renameToUUID(fileName);
		File datafile = null;
		try {
			FileUtil.uploadFile(file.getBytes(), bootdoConfig.getUploadPath(), fileName);
			datafile = new File(bootdoConfig.getUploadPath() + fileName);
			long userid = getUserId(); // log数据保存 用户id
			recordComplaintService.dataImport(datafile, userid);
		} catch (Exception e) {
			return R.error();
		}
		
		return R.ok();
	}
	
	/**
	 * 导出
	 */
	@RequestMapping(value = "/export")
	public @ResponseBody void export(
			HttpServletResponse response, HttpServletRequest request) throws ParseException {
		Map<String, Object> params = new HashMap<String, Object>();
		List<RecordComplaintDO> list = recordComplaintService.getQuery(params);
		if (list.size() > 0) {
			System.out.println("---------------------list.size------------------->" + list.size());
			response.setContentType("application/binary;charset=UTF-8");
			try {
				ServletOutputStream out = response.getOutputStream();
				String fileName = new String((new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()).getBytes(),"UTF-8");
				response.setHeader("Content-disposition", "attachment; filename=" + fileName + ".xls");
				String[] titles = { "客户投诉记录编号", "项目编号", "企业客户编号", "使用产品", "投诉人姓名", "投诉时间", "所在单位", "投诉方式", "投诉内容", "客服发送资料","问题描述备注", "售后服务类型", "问题描述", "处理人","处理过程","处理结果","售后备注","客户电话","客户邮箱","操作人","修改时间","创建时间"};
				recordComplaintService.export(titles, out, list);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	/**
	 * 上传文件
	 * 
	 * @param file
	 * @param request
	 * @return
	 */
	@ResponseBody
	@PostMapping("/upload")
	R upload(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
		
//		String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
//		chars.charAt((int)(Math.random() * 52))+
		String fileName = file.getOriginalFilename();
//		fileName = FileUtil.renameToUUID(fileName);
		FileDO sysFile = new FileDO(FileType.fileType(fileName), "/files/" + fileName, new Date(),fileName);
		try {
			FileUtil.uploadFile(file.getBytes(), bootdoConfig.getUploadPath(), fileName);
		} catch (Exception e) {
			return R.error();
		}
		int ids = sysFileService.save(sysFile);
		System.out.println(ids);
		if (ids > 0) {
			R r = R.ok();
			r.put("complaintAttachment", ids);
			r.put("fileName", sysFile.getUrl());
			return r;
//			return R.ok().put("fileName", sysFile.getUrl());
		}
		return R.error();
	}
	
	// 根据文件名称下载相关代码
	 	@ResponseBody
	 	@RequestMapping("/down")
	 	public void download(HttpServletResponse response,@RequestParam("fileName") String fileName) {
	 		try {
	 			// path是指欲下载的文件的路径。
	 			String path = "C:/var/uploaded_files/"+fileName;

	 			File file = new File(path);
	 			// 取得文件名。
	 			String filename = file.getName();
	 			
	 			// 以流的形式下载文件。
	 			InputStream fis = new BufferedInputStream(new FileInputStream(path));
	 			byte[] buffer = new byte[fis.available()];
	 			fis.read(buffer);
	 			fis.close();
	 			// 清空response
	 			response.reset();
	 			// 设置response的Header
	 			// 设置文件名
	 			
	 			response.addHeader("Content-Disposition", "attachment;filename=" + new String(filename.getBytes(),"ISO-8859-1"));
	 			// 设置文件打下
	 			response.addHeader("Content-Length", "" + file.length());
	 			OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
	 			response.setContentType("application/octet-stream");
	 			toClient.write(buffer);
	 			toClient.flush();
	 			toClient.close();
	 		} catch (IOException ex) {
	 			ex.printStackTrace();
	 		}
	 	}
	 	
	 	/**
		 * 执行删除文件的时候同时删除Complaint_Attachment字段下的附件ID
		 */
		@ResponseBody
		@RequestMapping("/updateComplaintAttachment")
		@RequiresPermissions("sales:recordComplaint:edit")
		public R updateComplaintAttachment(RecordComplaintDO recordComplaint) {
			recordComplaintService.updateComplaintAttachment(recordComplaint);
			return R.ok();
		}
		
	 	//根据ID查看附件列表
		@ResponseBody
		@GetMapping("/listId")
		@RequiresPermissions("common:sysFile:sysFile")
		public PageUtils listId(@RequestParam("complaintId")String complaintId,@RequestParam Map<String, Object> params) {
//	 				String aa=request.getParameter("customerId");
			params.put("complaintId", complaintId);
			// 查询列表数据
			Query query = new Query(params);
			List<FileDO> sysFileList = sysFileService.listComplaintAttachment(query);
			int total = sysFileService.listComplaintAttachmentCount(query);
			PageUtils pageUtils = new PageUtils(sysFileList, total);
			return pageUtils;
		}
	 	
	 	  /**
	     * 打包压缩下载文件
	     */
	    @RequestMapping(value = "/downLoadZipFile")
	    @ResponseBody
	    public void downLoadZipFile(HttpServletResponse response,@RequestParam("id")String id) throws IOException{
	    	String[] ids=id.split(",");
	        String zipName = "downLoadFile.zip";
	        List<FileDO> fileList = sysFileService.downLoadListId(ids);//查询数据库中记录
	        response.setContentType("APPLICATION/OCTET-STREAM");  
	        response.setHeader("Content-Disposition","attachment; filename="+zipName);
	        ZipOutputStream out = new ZipOutputStream(response.getOutputStream());
	        try {
	            for(Iterator<FileDO> it = fileList.iterator();it.hasNext();){
	            	FileDO file = it.next();
	                ZipUtils.doCompress("C:/var/uploaded_files/"+file.getFileName(), out);
	                response.flushBuffer();
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	        }finally{
	            out.close();
	        }
	    }
	  //模板下载
	    @ResponseBody
	 	@RequestMapping("/downloadTemplate")
	    public void download(HttpServletResponse response,HttpServletRequest request) {
	 		try {
	 			
//	 			 File files = new File(".\\src\\main\\resources\\downloadTemplate\\企业客户导入摸板.xls");
//	 			System.out.println("getAbsolutePath:"+files.getAbsolutePath());  //getAbsolutePath()会将.认为是一个以.命名的文件
//	 			System.out.println("getCanonicalPath:"+files.getCanonicalPath());//getCanonicalPath()得到的是一个规范路径没有.
//	 			

	 			File file = new File("./src/main/resources/downloadTemplate/客户投诉导入模板.xls");
	 			// 取得文件名。
	 			String filename = file.getName();
	 			
	 			// 以流的形式下载文件。
	 			InputStream fis = new BufferedInputStream(new FileInputStream(file.getCanonicalPath()));
	 			byte[] buffer = new byte[fis.available()];
	 			fis.read(buffer);
	 			fis.close();
	 			// 清空response
	 			response.reset();
	 			// 设置response的Header
	 			// 设置文件名
	 			response.addHeader("Content-Disposition", "attachment;filename=" + new String(filename.getBytes(),"ISO-8859-1"));
	 			// 设置文件打下
	 			response.addHeader("Content-Length", "" + file.length());
	 			OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
	 			response.setContentType("application/octet-stream");
	 			toClient.write(buffer);
	 			toClient.flush();
	 			toClient.close();
	 		} catch (IOException ex) {
	 			ex.printStackTrace();
	 		}
	 	}

	    
}
package com.bootdo.sales.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipOutputStream;

import javax.servlet.http.HttpServletResponse;

import org.apache.catalina.servlet4preview.http.HttpServletRequest;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.bootdo.sales.domain.CompanyCustomerDO;
import com.bootdo.sales.domain.OnlineFeedbackDO;
import com.bootdo.sales.service.OnlineFeedbackService;
import com.bootdo.common.config.BootdoConfig;
import com.bootdo.common.domain.FileDO;
import com.bootdo.common.service.FileService;
import com.bootdo.common.utils.FileType;
import com.bootdo.common.utils.FileUtil;
import com.bootdo.common.utils.PageUtils;
import com.bootdo.common.utils.Query;
import com.bootdo.common.utils.R;
import com.bootdo.common.utils.ZipUtils;

/**
 * 客户在线反馈信息表
 * 
 * @author sjr
 * @email 1992lcg@163.com
 * @date 2017-12-27 11:51:50
 */
 
@Controller
@RequestMapping("/sales/onlineFeedback")
public class OnlineFeedbackController {
	@Autowired
	private OnlineFeedbackService onlineFeedbackService;
	@Autowired
	private FileService sysFileService;
	@Autowired
	private BootdoConfig bootdoConfig;
	@GetMapping()
	@RequiresPermissions("sales:onlineFeedback:onlineFeedback")
	String OnlineFeedback(){
	    return "sales/onlineFeedback/onlineFeedback";
	}
	
	@ResponseBody
	@GetMapping("/list")
	@RequiresPermissions("sales:onlineFeedback:onlineFeedback")
	public PageUtils list(@RequestParam Map<String, Object> params){
		//查询列表数据
				if (params.get("feedbackId") != null
						&& !"".equals(params.get("feedbackId"))) {
					params.put("feedbackId", "%" + (String) params.get("feedbackId")
							+ "%");
				}
        Query query = new Query(params);
		List<OnlineFeedbackDO> onlineFeedbackList = onlineFeedbackService.list(query);
		int total = onlineFeedbackService.count(query);
		PageUtils pageUtils = new PageUtils(onlineFeedbackList, total);
		return pageUtils;
	}
	
	@GetMapping("/add")
	String add(){
	    return "sales/onlineFeedback/add";
	}

	@GetMapping("/edit/{feedbackId}")
	@RequiresPermissions("sales:onlineFeedback:edit")
	String edit(@PathVariable("feedbackId") String feedbackId,Model model){
		OnlineFeedbackDO onlineFeedback = onlineFeedbackService.get(feedbackId);
		model.addAttribute("onlineFeedback", onlineFeedback);
	    return "sales/onlineFeedback/edit";
	}
	
	/**
	 * 保存
	 */
	@ResponseBody
	@PostMapping("/save")
	public R save( OnlineFeedbackDO onlineFeedback){
		if(onlineFeedbackService.save(onlineFeedback)>0){
			return R.ok();
		}
		return R.error();
	}
//	/**
//	 * 修改附件id
//	 */
//	@ResponseBody
//	@PostMapping("/updateFeedbackAttachment")
//	public R updateFeedbackAttachment( OnlineFeedbackDO onlineFeedback){
//		if(onlineFeedbackService.updateFeedbackAttachment(onlineFeedback)>0){
//			return R.ok();
//		}
//		return R.error();
//	}
	/**
	 * 修改
	 */
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("sales:onlineFeedback:edit")
	public R update( OnlineFeedbackDO onlineFeedback){
		onlineFeedbackService.update(onlineFeedback);
		return R.ok();
	}
	
	/**
	 * 删除
	 */
	@PostMapping( "/remove")
	@ResponseBody
	@RequiresPermissions("sales:onlineFeedback:remove")
	public R remove( String feedbackId){
		if(onlineFeedbackService.remove(feedbackId)>0){
		return R.ok();
		}
		return R.error();
	}
	
	/**
	 * 删除
	 */
	@PostMapping( "/batchRemove")
	@ResponseBody
	@RequiresPermissions("sales:onlineFeedback:batchRemove")
	public R remove(@RequestParam("ids[]") String[] feedbackIds){
		onlineFeedbackService.batchRemove(feedbackIds);
		return R.ok();
	}
	// ajax修改绑定数据
		@RequestMapping("/edit_ajax/{feedbackId}")
		@ResponseBody
		Map<String, Object> edit_ajax(@PathVariable("feedbackId") String feedbackId) {
			OnlineFeedbackDO onlineFeedback = onlineFeedbackService.get(feedbackId);
			Map<String, Object> returnData = new HashMap<String, Object>();
			returnData.put("onlineFeedback", onlineFeedback);
			return returnData;
		}
	/**
	 * 上传文件
	 * 
	 * @param file
	 * @param request
	 * @return
	 */
	@ResponseBody
	@PostMapping("/upload")
	R upload(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
		
//		String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
//		chars.charAt((int)(Math.random() * 52))+
		String fileName = file.getOriginalFilename();
//		fileName = FileUtil.renameToUUID(fileName);
		FileDO sysFile = new FileDO(FileType.fileType(fileName), "/files/" + fileName, new Date(),fileName);
		try {
			FileUtil.uploadFile(file.getBytes(), bootdoConfig.getUploadPath(), fileName);
		} catch (Exception e) {
			return R.error();
		}
		int ids = sysFileService.save(sysFile);
		System.out.println(ids);
		if (ids > 0) {
			R r = R.ok();
			r.put("feedbackAttachment", ids);
			r.put("fileName", sysFile.getUrl());
			return r;
//			return R.ok().put("fileName", sysFile.getUrl());
		}
		return R.error();
	}

	
	
	// *************** 多文件下载级相关  *********************************************************
		/**
		 * 执行删除文件的时候同时删除FeedBack_Attachment字段下的附件ID
		 */
		@ResponseBody
		@RequestMapping("/updateOnlineFeedbackAttachment")
		@RequiresPermissions("sales:onlineFeedback:edit")
		public R updateOnlineFeedbackAttachment(OnlineFeedbackDO onlineFeedback) {
			onlineFeedbackService.updateOnlineFeedbackAttachment(onlineFeedback);
			return R.ok();
		}
		//根据ID查看附件列表
				@ResponseBody
				@GetMapping("/listId")
				@RequiresPermissions("common:sysFile:sysFile")
				public PageUtils listId(@RequestParam("feedbackId")String feedbackId,@RequestParam Map<String, Object> params) {
//					String aa=request.getParameter("feedbackId");
					params.put("feedbackId", feedbackId);
					// 查询列表数据
					Query query = new Query(params);
					List<FileDO> sysFileList = sysFileService.listOnlineFeedbackAttachment(query);
					for (int i = 0; i < sysFileList.size(); i++) {
						FileDO a =sysFileList.get(i);
						String urlFile=a.getUrl();
						String suffix=urlFile.substring(urlFile.indexOf(".")+1);
						if (suffix.equals("xls")||suffix.equals("xlsx")) {
							a.setSuffix("1");//1代表xlsx表格
						}else if (suffix.equals("docx")) {
							a.setSuffix("2");//2代表word文档
						}else if(suffix.equals("avi")||suffix.equals("wma")||suffix.equals("rmvb")||suffix.equals("rm")||suffix.equals("flash")||suffix.equals("mp4")||suffix.equals("mid")||suffix.equals("3GP")){
							a.setSuffix("3");//3代表视频文件
						}else if(suffix.equals("jpg")||suffix.equals("png")||suffix.equals("gif")||suffix.equals("tif")||suffix.equals("psd")||suffix.equals("dng")||suffix.equals("cr2")||suffix.equals("nef")){
							a.setSuffix("4");//4代表图片
						}else if(suffix.equals("rar")||suffix.equals("zip")){
							a.setSuffix("5");//5代表压缩文件
						}else {
							a.setSuffix("6");//6除以判断的文件之外的文件
						}
//						System.out.println("************************************************");
//						System.out.println(urlFile.substring(urlFile.indexOf(".")+1));
//						System.out.println("************************************************");
					}
					int total = sysFileService.listOnlineFeedbackAttachmentCount(query);
					PageUtils pageUtils = new PageUtils(sysFileList, total);
					return pageUtils;
				}
	 // 根据文件名称下载相关代码
	 	@ResponseBody
	 	@RequestMapping("/down")
	 	public void download(HttpServletResponse response,@RequestParam("fileName") String fileName) {
	 		try {
	 			// path是指欲下载的文件的路径。
	 			String path = "C:/var/uploaded_files/"+fileName;

	 			File file = new File(path);
	 			// 取得文件名。
	 			String filename = file.getName();
	 			
	 			// 以流的形式下载文件。
	 			InputStream fis = new BufferedInputStream(new FileInputStream(path));
	 			byte[] buffer = new byte[fis.available()];
	 			fis.read(buffer);
	 			fis.close();
	 			// 清空response
	 			response.reset();
	 			// 设置response的Header
	 			// 设置文件名
	 			response.addHeader("Content-Disposition", "attachment;filename=" + new String(filename.getBytes(),"ISO-8859-1"));
	 			// 设置文件打下
	 			response.addHeader("Content-Length", "" + file.length());
	 			OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
	 			response.setContentType("application/octet-stream");
	 			toClient.write(buffer);
	 			toClient.flush();
	 			toClient.close();
	 		} catch (IOException ex) {
	 			ex.printStackTrace();
	 		}
	 	}
	 	
	 	
	 	
	 	
	 	  /**
	     * 打包压缩下载文件
	     */
	    @RequestMapping(value = "/downLoadZipFile")
	    @ResponseBody
	    public void downLoadZipFile(HttpServletResponse response,@RequestParam("id")String id) throws IOException{
	    	String[] ids=id.split(",");
	        String zipName = "downLoadFile.zip";
	        List<FileDO> fileList = sysFileService.downLoadListId(ids);//查询数据库中记录
	        response.setContentType("APPLICATION/OCTET-STREAM");  
	        response.setHeader("Content-Disposition","attachment; filename="+zipName);
	        ZipOutputStream out = new ZipOutputStream(response.getOutputStream());
	        try {
	            for(Iterator<FileDO> it = fileList.iterator();it.hasNext();){
	            	FileDO file = it.next();
	                ZipUtils.doCompress("C:/var/uploaded_files/"+file.getFileName(), out);
	                response.flushBuffer();
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	        }finally{
	            out.close();
	        }
	    }
}

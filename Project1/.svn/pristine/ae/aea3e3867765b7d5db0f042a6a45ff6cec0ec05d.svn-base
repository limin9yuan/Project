package com.bootdo.sales.service.impl;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.NumberToTextConverter;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;

import com.bootdo.common.domain.DictDO;
import com.bootdo.common.domain.MainCopyPersonDO;
import com.bootdo.contract.domain.PayoutDO;
import com.bootdo.inner.domain.InnerOrgEmployeeDO;
import com.bootdo.sales.service.CustomerContactService;
import com.bootdo.sales.dao.CustomerContactDao;
import com.bootdo.sales.domain.CompanyCustomerDO;
import com.bootdo.sales.domain.CustomerContactDO;

@Service
public class CustomerContactServiceImpl implements CustomerContactService {
	@Autowired
	private CustomerContactDao customerContactDao;

	@Override
	public CustomerContactDO get(String contactId) {
		return customerContactDao.get(contactId);
	}

	@Override
	public List<CustomerContactDO> list(Map<String, Object> map) {
		// 企业名称
		if (map.get("customerName") != null && !"".equals(map.get("customerName"))) {
			map.put("customerName", "%" + map.get("customerName") + "%");
		}
		// 企业编号
		if (map.get("customerId") != null && !"".equals(map.get("customerId"))) {
			map.put("customerId", "%" + map.get("customerId") + "%");
		}
		// 联系人姓名
		if (map.get("contactName") != null && !"".equals(map.get("contactName"))) {
			map.put("contactName", "%" + map.get("contactName") + "%");
		}
		// 业务信息
		if (map.get("businessName") != null && !"".equals(map.get("businessName"))) {
			map.put("businessName", "%" + map.get("businessName") + "%");
		}
		// 项目信息
		if (map.get("projectName") != null && !"".equals(map.get("projectName"))) {
			map.put("projectName", "%" + map.get("projectName") + "%");
		}
		return customerContactDao.list(map);
	}

	@Override
	public int count(Map<String, Object> map) {
		return customerContactDao.count(map);
	}

	@Override
	public int save(CustomerContactDO customerContact) {
		return customerContactDao.save(customerContact);
	}

	@Override
	public int update(CustomerContactDO customerContact) {
		return customerContactDao.update(customerContact);
	}

	@Override
	public int remove(String contactId) {
		return customerContactDao.remove(contactId);
	}

	@Override
	public int batchRemove(String[] contactIds) {
		return customerContactDao.batchRemove(contactIds);
	}

	@Override
	public List<DictDO> listDic() {
		return customerContactDao.listDic();
	}

	/**
	 * 数据导入功能
	 */
	@Override
	public Map<String, Object> Import(File file, long userid) {
		Workbook wookbook = null;
		List<String> errorMsgs = null;
		Map<String, Object> result = null;
		int rtn = 0;
		try {
			result = new HashMap<String, Object>();
			errorMsgs = new ArrayList<String>();
			FileInputStream is = new FileInputStream(file); // 文件流
			wookbook = WorkbookFactory.create(is); // 这种方式 Excel 2003/2007/2010 都是可以处理的

			// 在Excel文档中，第一张工作表的缺省索引是0
			// 其语句为：HSSFSheet sheet = wookbook.getSheetAt(0);
			Sheet sheet = wookbook.getSheetAt(0);// wookbook.getSheet("Sheet1");
			// 获取到Excel文件中的所有行数
			int rows = sheet.getPhysicalNumberOfRows();
			// Excel文件中的第一行（标题行）
			int cellCount = 0;
			// 遍历行
			my: for (int i = 0; i < rows; i++) {
				// 读取左上端单元格(跳过第一行标题行)
				Row row = sheet.getRow(i);
				CustomerContactDO customerContactDO = new CustomerContactDO(); // 工厂信息表

				// 行不为空
				if (row != null) {
					if (i == 0) {
						// 获取到Excel文件中的第一行（标题行）
						Row rowCount = sheet.getRow(i);

						// 获取到Excel文件中的所有的列
						cellCount = rowCount.getPhysicalNumberOfCells();
						continue;
					}
					// 获取到Excel文件中的所有的列
					// int cells = row.getPhysicalNumberOfCells();
					String cellvalue = "";
					String contact = "";
					String agentCode = null;
					String companyName = null;
					// 遍历列
					for (int j = 0; j < cellCount; j++) {
						cellvalue = ""; // 清空之前之前取到的列的值
						// 获取到列的值
						Cell cell = row.getCell(j);
						// String value = "";
						if (cell != null) {
							switch (cell.getCellType()) {
							case XSSFCell.CELL_TYPE_FORMULA:
								break;
							case XSSFCell.CELL_TYPE_NUMERIC: {
								short format = cell.getCellStyle().getDataFormat();
								if (format == 14 || format == 31 || format == 57 || format == 58) { // excel中的时间格式
									SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
									double value = cell.getNumericCellValue();
									Date date = DateUtil.getJavaDate(value);
									cellvalue = sdf.format(date);
								}
								// 判断当前的cell是否为Date
								else if (HSSFDateUtil.isCellDateFormatted(cell)) { // 先注释日期类型的转换，在实际测试中发现HSSFDateUtil.isCellDateFormatted(cell)只识别2014/02/02这种格式。
									// 如果是Date类型则，取得该Cell的Date值 // 对2014-02-02格式识别不出是日期格式
									Date date = cell.getDateCellValue();
									DateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
									cellvalue = formater.format(date);
								} else { // 如果是纯数字
									// 取得当前Cell的数值
									cellvalue = NumberToTextConverter.toText(cell.getNumericCellValue());
								}
								break;
							}
							case XSSFCell.CELL_TYPE_STRING:
								cellvalue = cell.getStringCellValue();
								break;
							default:
								break;
							}
						}
						if (j == 0) {
							customerContactDO.setContactName(cellvalue);
						} else if (j == 1) {

							customerContactDO.setContactSex(String.valueOf(cellvalue));
						} else if (j == 2) {
							customerContactDO.setContactSalutation(cellvalue);
						} else if (j == 3) {
							customerContactDO.setContactTitle(cellvalue);
						} else if (j == 4) {
							customerContactDO.setContactResponsibility(cellvalue);
						} else if (j == 5) {
							customerContactDO.setContactRole(cellvalue);
						} else if (j == 6) {
							customerContactDO.setCustomerId(cellvalue);
						} else if (j == 7) {
							customerContactDO.setContactDept(cellvalue);
						} else if (j == 8) {
							customerContactDO.setContactJob(cellvalue);
						} else if (j == 9) {
							customerContactDO.setContactMaritalStatus(String.valueOf(cellvalue));
						} else if (j == 10) {
							customerContactDO.setContactAge(Integer.valueOf(cellvalue));
						} else if (j == 11) {
							customerContactDO.setContactFamilyStatus(cellvalue);
						} else if (j == 12) {
							customerContactDO.setContactBirthDay(cellvalue);
						} else if (j == 13) {
							customerContactDO.setContactGraduateInstitutions(cellvalue);
						} else if (j == 14) {
							customerContactDO.setContactSkill(cellvalue);
						} else if (j == 15) {
							customerContactDO.setContactYearsWorking(Integer.valueOf(cellvalue));
						} else if (j == 16) {
							customerContactDO.setContactExperience(cellvalue);
						} else if (j == 17) {
							customerContactDO.setContactPreviousCompany(cellvalue);
						} else if (j == 18) {
							customerContactDO.setContactSuperiors(cellvalue);
						} else if (j == 19) {
							customerContactDO.setContactStatus(cellvalue);
						} else if (j == 20) {
							customerContactDO.setContactIntroduction(cellvalue);
						} else if (j == 21) {
							customerContactDO.setContactOwner(cellvalue);
						} else if (j == 22) {
							customerContactDO.setContactSales(cellvalue);
						} else if (j == 23) {
							customerContactDO.setContactPhoneNumber(cellvalue);
						} else if (j == 24) {
							customerContactDO.setContactMailbox(cellvalue);
						} else if (j == 25) {
							customerContactDO.setContactWorkPhoneNumber(cellvalue);
						} else if (j == 26) {
							customerContactDO.setContactFamilyPhoneNumber(cellvalue);
						} else if (j == 27) {
							customerContactDO.setContactFax(cellvalue);
						} else if (j == 28) {
							customerContactDO.setContactFamilyAddress(cellvalue);
						} else if (j == 29) {
							customerContactDO.setContactWeixin(cellvalue);
						} else if (j == 30) {
							customerContactDO.setContactQq(cellvalue);
						} else if (j == 31) {
							customerContactDO.setContactSpecialDayCategory(cellvalue);
						} else if (j == 32) {
							customerContactDO.setContactSpecialDay(cellvalue);
						} else if (j == 33) {
							customerContactDO.setContactInterest(cellvalue);
						}

						else if (j == 34) {
							customerContactDO.setContactRemarks(cellvalue);
						}

					} // --->遍历列
					customerContactDO.setContactOperator(Long.toString(userid));

					customerContactDO.setContactCreateTime(new Date());

					rtn = customerContactDao.save(customerContactDO);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			wookbook.cloneSheet(0); // 关闭sheet页
			try {
				wookbook.close(); // 关闭Excel文件
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if (CollectionUtils.isEmpty(errorMsgs)) { // errorMsgs.size() == 0

			if (rtn > 0) {
				result.put("result", "success");
			} else {
				result.put("result", "false");
			}
		} else {
			result.put("result", "error");
			result.put("msg", errorMsgs);
		}
		return result;
	}

	@Override
	public List<CustomerContactDO> getQuery1(Map<String, Object> params) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void export1(String[] titles, ServletOutputStream out, List<CustomerContactDO> list) {
		// TODO Auto-generated method stub

	}

	/**
	 * 导出Excel写入文件方法
	 */
	public void export(String[] titles, ServletOutputStream out, List<CustomerContactDO> list) {
		try {
			// 第一步，创建一个workbook，对应一个Excel文件
			HSSFWorkbook workbook = new HSSFWorkbook();
			// 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet
			HSSFSheet hssfSheet = workbook.createSheet("sheet1");
			// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short
			HSSFRow hssfRow = hssfSheet.createRow(0);
			// 第四步，创建单元格，并设置值表头 设置表头居中
			HSSFCellStyle hssfCellStyle = workbook.createCellStyle();
			// 居中样式
			hssfCellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
			HSSFCell hssfCell = null;
			for (int i = 0; i < titles.length; i++) {
				hssfCell = hssfRow.createCell(i);// 列索引从0开始
				hssfCell.setCellValue(titles[i]);// 列名1
				hssfCell.setCellStyle(hssfCellStyle);// 列居中显示
			}
			// 第五步，写入实体数据
			if (list != null && !list.isEmpty()) {
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				for (int i = 0; i < list.size(); i++) {
					hssfRow = hssfSheet.createRow(i + 1);
					CustomerContactDO report = list.get(i);
					/** 第六步，创建单元格，并设置值 **/
//					// 序号
//					hssfRow.createCell(0).setCellValue(i + 1);
					// 联系人编号
					String ContactId = "";
					if (report.getContactId() != null) {
						ContactId = report.getContactId();
					}
					hssfRow.createCell(0).setCellValue(ContactId);
					// 姓名
					String ContactName = "";
					if (report.getContactName() != null) {
						ContactName = report.getContactName();
					}
					hssfRow.createCell(1).setCellValue(ContactName);
					// 性别
					String ContactSex = "";
					if (report.getContactSex() != null) {
						String ContactSex1 = report.getContactSex();
						ContactSex = String.valueOf(ContactSex1);
					}
					hssfRow.createCell(2).setCellValue(ContactSex);
					// 称谓
					String ContactSalutation = "";
					if (report.getContactSalutation() != null) {
						ContactSalutation = report.getContactSalutation();
					}
					hssfRow.createCell(3).setCellValue(ContactSalutation);
					// 职务
					String ContactTitle = "";
					if (report.getContactTitle() != null) {
						ContactTitle = report.getContactTitle();
					}
					hssfRow.createCell(4).setCellValue(ContactTitle);
					// 负责业务
					String ContactResponsibility = "";
					if (report.getContactResponsibility() != null) {
						ContactResponsibility = report.getContactResponsibility();
					}
					hssfRow.createCell(5).setCellValue(ContactResponsibility);
					// 角色
					String ContactRole = "";
					if (report.getContactRole() != null) {
						ContactRole = report.getContactRole();
					}
					hssfRow.createCell(6).setCellValue(ContactRole);
					// 企业客户编号
					String CustomerId = "";
					if (report.getCustomerId() != null) {
						CustomerId = report.getCustomerId();
					}
					hssfRow.createCell(7).setCellValue(CustomerId);
					// 部门
					String ContactDept = "";
					if (report.getContactDept() != null) {
						ContactDept = report.getContactDept();
					}
					hssfRow.createCell(8).setCellValue(ContactDept);
					// 岗位
					String ContactJob = "";
					if (report.getContactJob() != null) {
						ContactJob = report.getContactJob();
					}
					hssfRow.createCell(9).setCellValue(ContactJob);
					// 婚否
					String ContactMaritalStatus = "";
					if (report.getContactMaritalStatus() != null) {
						String ContactMaritalStatus1 = report.getContactMaritalStatus();
						ContactMaritalStatus = String.valueOf(ContactMaritalStatus1);
					}
					hssfRow.createCell(10).setCellValue(ContactMaritalStatus);
					// 出生日期
					String ContactBirthDay = "";
					if (report.getContactBirthDay() != null) {
						ContactBirthDay = report.getContactBirthDay();
					}
					hssfRow.createCell(11).setCellValue(ContactBirthDay);
					// 年龄
					String ContactAge = "";
					if (report.getContactAge() != null) {
						Integer ContactAge1 = report.getContactAge();
						ContactAge = String.valueOf(ContactAge1);
					}

					hssfRow.createCell(12).setCellValue(ContactAge);
					// 家庭情况
					String ContactFamilyStatus = "";
					if (report.getContactFamilyStatus() != null) {
						ContactFamilyStatus = report.getContactFamilyStatus();
					}
					hssfRow.createCell(13).setCellValue(ContactFamilyStatus);
					// 毕业院校
					String ContactGraduateInstitutions = "";
					if (report.getContactGraduateInstitutions() != null) {
						ContactGraduateInstitutions = report.getContactGraduateInstitutions();
					}
					hssfRow.createCell(14).setCellValue(ContactGraduateInstitutions);
					// 专业技能
					String ContactSkill = "";
					if (report.getContactSkill() != null) {
						ContactSkill = report.getContactSkill();
					}
					hssfRow.createCell(15).setCellValue(ContactSkill);
					// 工作年限
					String ContactYearsWorking = "";
					if (report.getContactYearsWorking() != null) {
						Integer ContactYearsWorking1 = report.getContactYearsWorking();
						ContactYearsWorking = String.valueOf(ContactYearsWorking1);
					}
					hssfRow.createCell(16).setCellValue(ContactYearsWorking);
					// 工作经验
					String ContactExperience = "";
					if (report.getContactExperience() != null) {
//						Integer ContactExperience1 = report.getContactExperience();
						ContactExperience = report.getContactExperience();
					}
					hssfRow.createCell(17).setCellValue(ContactExperience);
					// 曾供职单位
					String ContactPreviousCompany = "";
					if (report.getContactPreviousCompany() != null) {
						ContactPreviousCompany = report.getContactPreviousCompany();
					}
					hssfRow.createCell(18).setCellValue(ContactPreviousCompany);
					// 上级领导
					String ContactSuperiors = "";
					if (report.getContactSuperiors() != null) {
						ContactSuperiors = report.getContactSuperiors();
					}
					hssfRow.createCell(19).setCellValue(ContactSuperiors);
					// 联系人状态
					String ContactStatus = "";
					if (report.getContactStatus() != null) {
						ContactStatus = report.getContactStatus();
					}
					hssfRow.createCell(20).setCellValue(ContactStatus);
					// 联系情况
					String ContactIntroduction = "";
					if (report.getContactIntroduction() != null) {
						ContactIntroduction = report.getContactIntroduction();
					}
					hssfRow.createCell(21).setCellValue(ContactIntroduction);
					// 客户所有者
					String ContactOwner = "";
					if (report.getContactOwner() != null) {
						ContactOwner = report.getContactOwner();
					}
					hssfRow.createCell(22).setCellValue(ContactOwner);
					// 销售负责人
					String ContactSales = "";
					if (report.getContactSales() != null) {
						ContactSales = report.getContactSales();
					}
					hssfRow.createCell(23).setCellValue(ContactSales);
					// 手机
					String ContactPhoneNumber = "";
					if (report.getContactPhoneNumber() != null) {
						ContactPhoneNumber = report.getContactPhoneNumber();
					}
					hssfRow.createCell(24).setCellValue(ContactPhoneNumber);
					// 邮箱
					String ContactMailbox = "";
					if (report.getContactMailbox() != null) {
						ContactMailbox = report.getContactMailbox();
					}
					hssfRow.createCell(25).setCellValue(ContactMailbox);
					// 工作电话
					String ContactWorkPhoneNumber = "";
					if (report.getContactWorkPhoneNumber() != null) {
						ContactWorkPhoneNumber = report.getContactWorkPhoneNumber();
					}
					hssfRow.createCell(26).setCellValue(ContactWorkPhoneNumber);
					// 家庭电话
					String ContactFamilyPhoneNumber = "";
					if (report.getContactFamilyPhoneNumber() != null) {
						ContactFamilyPhoneNumber = report.getContactFamilyPhoneNumber();
					}
					hssfRow.createCell(27).setCellValue(ContactFamilyPhoneNumber);
					// 传真
					String ContactFax = "";
					if (report.getContactFax() != null) {
						ContactFax = report.getContactFax();
					}
					hssfRow.createCell(28).setCellValue(ContactFax);
					// 家庭住址
					String ContactFamilyAddress = "";
					if (report.getContactFamilyAddress() != null) {
						ContactFamilyAddress = report.getContactFamilyAddress();
					}
					hssfRow.createCell(29).setCellValue(ContactFamilyAddress);
					// 微信
					String ContactWeixin = "";
					if (report.getContactWeixin() != null) {
						ContactWeixin = report.getContactWeixin();
					}
					hssfRow.createCell(30).setCellValue(ContactWeixin);
					// QQ
					String ContactQQ = "";
					if (report.getContactQq() != null) {
						ContactQQ = report.getContactQq();
					}
					hssfRow.createCell(31).setCellValue(ContactQQ);
					// 纪念日类别
					String ContactSpecialDayCategory = "";
					if (report.getContactSpecialDayCategory() != null) {
						ContactSpecialDayCategory = report.getContactSpecialDayCategory();
					}
					hssfRow.createCell(32).setCellValue(ContactSpecialDayCategory);
					// 纪念日
					String ContactSpecialDay = "";
					if (report.getContactSpecialDay() != null) {
						ContactSpecialDay = report.getContactSpecialDay();
					}
					hssfRow.createCell(33).setCellValue(ContactSpecialDay);
					// 爱好
					String ContactInterest = "";
					if (report.getContactInterest() != null) {
						ContactInterest = report.getContactInterest();
					}
					hssfRow.createCell(34).setCellValue(ContactInterest);
					// 备注
					String ContactRemarks = "";
					if (report.getContactRemarks() != null) {
						ContactRemarks = report.getContactRemarks();
					}
					hssfRow.createCell(35).setCellValue(ContactRemarks);

					// 操作人
					String ContactOperator = "";
					if (report.getContactOperator() != null) {
						ContactOperator = report.getContactOperator();
					}
					hssfRow.createCell(36).setCellValue(ContactOperator);
					// 创建时间
					String getContactCreateTime = "";
					if (report.getContactCreateTime() != null) {
						getContactCreateTime = sdf.format(report.getContactCreateTime());
					}
					hssfRow.createCell(37).setCellValue(getContactCreateTime);
					// 修改时间
					String getContactOperateTime = "";
					if (report.getContactOperateTime() != null) {
						getContactOperateTime = sdf.format(report.getContactOperateTime());
					}
					hssfRow.createCell(38).setCellValue(getContactOperateTime);
				}
			}
			// 第七步，将文件输出到客户端浏览器
			try {
				workbook.write(out);
				out.flush();
				out.close();

			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
			try {
				throw new Exception("联系人信息导出失败！");
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
	}

	/**
	 * 导出excel
	 */
	public List<CustomerContactDO> getQuery(Map<String, Object> params) {
		List<CustomerContactDO> returnData = customerContactDao.list(params);
		return returnData;

		/*
		 * for (int i = 0; i < returnDate.size(); i++) { }
		 */
	}

	@Override
	public int saveMain(MainCopyPersonDO mainCopyPerson) {
		// TODO Auto-generated method stub
		return customerContactDao.saveMain(mainCopyPerson);
	}
}

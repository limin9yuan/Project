package com.bootdo.sales.service.impl;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.NumberToTextConverter;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;

import com.bootdo.common.domain.DictDO;
import com.bootdo.sales.dao.BusinessDao;
import com.bootdo.sales.domain.BusinessDO;
import com.bootdo.sales.service.BusinessService;

@Service
public class BusinessServiceImpl implements BusinessService {
	@Autowired
	private BusinessDao businessDao;
	@Autowired
	private BusinessService businessService;
	@Override
	public BusinessDO get(String businessId) {
		return businessDao.get(businessId);
	}

	@Override
	public List<BusinessDO> list(Map<String, Object> map) {
		return businessDao.list(map);
	}
	
	@Override
	public int count(Map<String, Object> map) {
		return businessDao.count(map);
	}

	@Override
	public int save(BusinessDO business) {
		return businessDao.save(business);
	}

	@Override
	public int update(BusinessDO business) {
		return businessDao.update(business);
	}

	@Override
	public int remove(String businessId) {
		return businessDao.remove(businessId);
	}

	@Override
	public int batchRemove(String[] businessIds) {
		return businessDao.batchRemove(businessIds);
	}

	@Override
	public String getMaxBusinessId() {
		return businessDao.getMaxBusinessId();
	}

	@Override
	public List<DictDO> listDic() {
		return businessDao.listDic();
	}

	@Override
	public List<DictDO> listDicSale() {
		return businessDao.listDicSale();
	}
	
	/**
	 * 数据导入功能 1.需要导入模板
	 */
	@Override
	public Map<String, Object> dataImport(File file, long userid) {
		Workbook wookbook = null;
		List<String> errorMsgs = null;
		Map<String, Object> result = null;
		int rtn = 0;
		try {
			result = new HashMap<String, Object>();
			errorMsgs = new ArrayList<String>();
			FileInputStream is = new FileInputStream(file); // 文件流
			wookbook = WorkbookFactory.create(is); // 这种方式 Excel 2003/2007/2010 都是可以处理的
			// 在Excel文档中，第一张工作表的缺省索引是0
			// 其语句为：HSSFSheet sheet = wookbook.getSheetAt(0);
			Sheet sheet = wookbook.getSheetAt(0);// wookbook.getSheet("Sheet1");
			// 获取到Excel文件中的所有行数
			int rows = sheet.getPhysicalNumberOfRows();
			// Excel文件中的第一行（标题行）
			int cellCount = 0;
			// 遍历行
			my: for (int i = 0; i < rows; i++) {
				// 读取左上端单元格(跳过第一行标题行)
				Row row = sheet.getRow(i);
				BusinessDO businessDO = new BusinessDO(); // 業務信息表
				// 行不为空
				if (row != null) {
					if (i == 0) {
						// 获取到Excel文件中的第一行（标题行）
						Row rowCount = sheet.getRow(i);
						// 获取到Excel文件中的所有的列
						cellCount = rowCount.getPhysicalNumberOfCells();
						continue;
					}
					// 获取到Excel文件中的所有的列
					// int cells = row.getPhysicalNumberOfCells();
					String cellvalue = "";
					String contact = "";
					String agentCode = null;
					String companyName = null;
					// 遍历列
					for (int j = 0; j < cellCount; j++) {
						cellvalue = ""; // 清空之前之前取到的列的值
						// 获取到列的值
						Cell cell = row.getCell(j);
						// String value = "";
						if (cell != null) {
							switch (cell.getCellType()) {
							case XSSFCell.CELL_TYPE_FORMULA:
								break;
							case XSSFCell.CELL_TYPE_NUMERIC: {
								short format = cell.getCellStyle().getDataFormat();
								if (format == 14 || format == 31 || format == 57 || format == 58) { // excel中的时间格式
									SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
									double value = cell.getNumericCellValue();
									Date date = DateUtil.getJavaDate(value);
									cellvalue = sdf.format(date);
								}
								// 判断当前的cell是否为Date
								else if (HSSFDateUtil.isCellDateFormatted(cell)) {// 先注释日期类型的转换，在实际测试中发现HSSFDateUtil.isCellDateFormatted(cell)只识别2014/02/02这种格式。
									// 如果是Date类型则，取得该Cell的Date值 // 对2014-02-02格式识别不出是日期格式
									Date date = cell.getDateCellValue();
									DateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
									cellvalue = formater.format(date);
								} else {
									// 如果是纯数字
									// 取得当前Cell的数值
									cellvalue = NumberToTextConverter.toText(cell.getNumericCellValue());
								}
								break;
							}
							case XSSFCell.CELL_TYPE_STRING:
								cellvalue = cell.getStringCellValue();
								break;
							default:
								break;
							}
						}
						if (j == 0) {
							businessDO.setCustomerId(cellvalue);
						} else if (j == 1) {
							businessDO.setContactId(cellvalue);
						} else if (j == 2) {
							businessDO.setBusinessName(cellvalue);
						} else if (j == 3) {
							businessDO.setBusinessCategory(cellvalue);
						} else if (j == 4) {
							businessDO.setBusinessStatus(cellvalue);
						} else if (j == 5) {
							businessDO.setBusinessSales(cellvalue);
						} else if (j == 6) {
							businessDO.setBusinessOldId(cellvalue);
						} else if (j == 7) {
							businessDO.setBusinessDescription(cellvalue);
						} else if (j == 8) {
							businessDO.setBusinessRemarks(cellvalue);
						} 
//						else if (j == 9) {
//							businessDO.setBusinessOperator(cellvalue);
//						} else if (j == 10) {
//							businessDO.setBusinessCreatorName(cellvalue);
//						}
					} // --->遍历列
						// 数据库都不是自增，待解决~
					String businessIds = businessService.getBusinessId(businessDO);
					businessDO.setBusinessOperator(Long.toString(userid));
					businessDO.setBusinessId(businessIds);
					businessDO.setBusinessOperateTime(new Date());
					businessDO.setBusinessCreateTime(new Date());
					rtn = businessDao.saveDownloadTemplate(businessDO);
				}
			}
		} catch (Exception e) {
			errorMsgs.add(e.getMessage());
			e.printStackTrace();
		} finally {
			wookbook.cloneSheet(0); // 关闭sheet页
			try {
				wookbook.close(); // 关闭Excel文件
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if (CollectionUtils.isEmpty(errorMsgs)) { // errorMsgs.size() == 0

			if (rtn > 0) {
				result.put("result", "success");
			} else {
				result.put("result", "false");
			}
		} else {
			result.put("result", "error");
			result.put("msg", errorMsgs);
		}
		return result;
	}

	/**
	 * 导出Excel写入文件方法
	 */
	public void export(String[] titles, ServletOutputStream out, List<BusinessDO> list) {
		try {
			// 第一步，创建一个workbook，对应一个Excel文件
			HSSFWorkbook workbook = new HSSFWorkbook();
			// 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet
			HSSFSheet hssfSheet = workbook.createSheet("sheet1");
			// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short
			HSSFRow hssfRow = hssfSheet.createRow(0);
			// 第四步，创建单元格，并设置值表头 设置表头居中
			HSSFCellStyle hssfCellStyle = workbook.createCellStyle();
			// 居中样式
			hssfCellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
			HSSFCell hssfCell = null;
			for (int i = 0; i < titles.length; i++) {
				hssfCell = hssfRow.createCell(i);// 列索引从0开始
				hssfCell.setCellValue(titles[i]);// 列名1
				hssfCell.setCellStyle(hssfCellStyle);// 列居中显示
			}
			// 第五步，写入实体数据
			if (list != null && !list.isEmpty()) {
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				for (int i = 0; i < list.size(); i++) {
					hssfRow = hssfSheet.createRow(i + 1);
					BusinessDO report = list.get(i);
					/** 第六步，创建单元格，并设置值 **/
					// 序号
					hssfRow.createCell(0).setCellValue(i + 1);
					// 业务编号
					String BusinessId = "";
					if (report.getBusinessId() != null) {
						BusinessId = report.getBusinessId();
					}
					hssfRow.createCell(0).setCellValue(BusinessId);
					// 企业客户编号
					String CustomerId = "";
					if (report.getCustomerId() != null) {
						CustomerId = report.getCustomerId();
					}
					hssfRow.createCell(1).setCellValue(CustomerId);
					// 联系人编号
					String ContactId = "";
					if (report.getContactId() != null) {
						ContactId = report.getContactId();
					}
					hssfRow.createCell(2).setCellValue(ContactId);
					// 业务名称
					String BusinessName = "";
					if (report.getBusinessName() != null) {
						BusinessName = report.getBusinessName();
					}
					hssfRow.createCell(3).setCellValue(BusinessName);
					// 业务类型
					String BusinessCategory = "";
					if (report.getBusinessCategory() != null) {
						BusinessCategory = report.getBusinessCategory();
					}
					hssfRow.createCell(4).setCellValue(BusinessCategory);
					// 业务状态
					String BusinessStatus = "";
					if (report.getBusinessStatus() != null) {
						BusinessStatus = report.getBusinessStatus();
					}
					hssfRow.createCell(5).setCellValue(BusinessStatus);
					// 销售负责人姓名
					String BusinessSales = "";
					if (report.getBusinessSalesName() != null) {
						BusinessSales = report.getBusinessSalesName();
					}
					hssfRow.createCell(6).setCellValue(BusinessSales);
					// 旧业务编号
					String BusinessOldId = "";
					if (report.getBusinessOldId() != null) {
						BusinessOldId = report.getBusinessOldId();
					}
					hssfRow.createCell(7).setCellValue(BusinessOldId);
					// 业务描述
					String BusinessDescription = "";
					if (report.getBusinessDescription() != null) {
						BusinessDescription = report.getBusinessDescription();
					}
					hssfRow.createCell(8).setCellValue(BusinessDescription);
					// 备注
					String BusinessRemarks = "";
					if (report.getBusinessRemarks() != null) {
						BusinessRemarks = report.getBusinessRemarks();
					}
					hssfRow.createCell(9).setCellValue(BusinessRemarks);
					// 业务修改人(操作人)
					String BusinessOperator = "";
					if (report.getBusinessOperator() != null) {
						BusinessOperator = report.getBusinessOperator();
					}
					hssfRow.createCell(10).setCellValue(BusinessOperator);
					// 业务修改时间
					String BusinessOperateTime = "";
					if (report.getBusinessOperateTime() != null) {
						Date getBusinessOperateTime1 = report.getBusinessOperateTime();
						BusinessOperateTime = sdf.format(getBusinessOperateTime1);
					}
					hssfRow.createCell(11).setCellValue(BusinessOperateTime);
					// 业务创建人
					String BusinessCreatorName = "";
					if (report.getBusinessCreatorName() != null) {
						BusinessCreatorName = report.getBusinessCreatorName();
					}
					hssfRow.createCell(12).setCellValue(BusinessCreatorName);
					// 业务创建时间
					String BusinessCreateTime = "";
					if (report.getBusinessCreateTime() != null) {
						Date getBusinessCreateTime1 = report.getBusinessCreateTime();
						BusinessCreateTime = sdf.format(getBusinessCreateTime1);
					}
					hssfRow.createCell(13).setCellValue(BusinessCreateTime);
				}
			}
			// 第七步，将文件输出到客户端浏览器
			try {
				workbook.write(out);
				out.flush();
				out.close();

			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
			try {
				throw new Exception("日报信息导出失败！");
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
	}

	/**
	 * 导出excel
	 */
	public List<BusinessDO> getQuery(Map<String, Object> params) {
		List<BusinessDO> returnData = businessDao.list(params);
		return returnData;
	}

	@Override
	public String getBusinessId(BusinessDO businessId) {
		// TODO Auto-generated method stub
		return businessDao.getBusinessId(businessId);
	}

	@Override
	public int saveDownloadTemplate(BusinessDO business) {
		// TODO Auto-generated method stub
		return businessDao.saveDownloadTemplate(business);
	}
}

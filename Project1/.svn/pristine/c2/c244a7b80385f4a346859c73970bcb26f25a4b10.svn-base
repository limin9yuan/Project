<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bootdo.workDay.dao.WorkDayDao">

	<select id="get" resultType="com.bootdo.workDay.domain.WorkDayDO">
		select `Holiday_Id`,`Holiday_Name`,`Start_Day`,`End_Day`,`Start_Work`,`End_Work`
		from holiday
		where Holiday_Id = #{value}
	</select>

	<select id="getOfficeDay" resultType="com.bootdo.workDay.domain.WorkDayDO">
		select `Office_Id`,`Name`,`Office_Day`,`Start_Work`,`End_Work` from office_day where Office_Id = #{value}
	</select>

	<select id="list" resultType="com.bootdo.workDay.domain.WorkDayDO">
		select `Holiday_Id`,`Holiday_Name`,`Start_Day`,`End_Day`,`Start_Work`,`End_Work`
		from holiday
		<where>
			<if test="holidayId != null and holidayId != ''"> and Holiday_Id = #{holidayId} </if>
			<if test="holidayName != null and holidayName != ''"> and Holiday_Name = #{holidayName} </if>
			<if test="startDay != null and startDay != ''"> and Start_Day = #{startDay} </if>
			<if test="endDay != null and endDay != ''"> and End_Day = #{endDay} </if>
			<if test="startWork != null"> and `Start_Work` = #{startWork}</if>
			<if test="endWork != null"> and `End_Work` = #{endWork}</if>
		</where>
		<choose>
			<when test="sort != null and sort.trim() != ''">
				order by ${sort} ${order}
			</when>
			<otherwise>
				order by Holiday_Id desc
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="listOfficeDay" resultType="com.bootdo.workDay.domain.WorkDayDO">
		select `Office_Id`,`Name`,`Office_Day`,`Start_Work`,`End_Work` from office_day
		<where>
			<if test="officeId != null and officeId != ''"> and Office_Id = #{officeId} </if>
			<if test="name != null and name != ''"> and Name = #{name} </if>
			<if test="officeDay != null and officeDay != ''"> and Office_Day = #{officeDay} </if>
			<if test="startWork != null"> and `Start_Work` = #{startWork}</if>
			<if test="endWork != null"> and `End_Work` = #{endWork}</if>
		</where>
		<choose>
			<when test="sort != null and sort.trim() != ''">
				order by ${sort} ${order}
			</when>
			<otherwise>
				order by Office_Id desc
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="countOfficeDay" resultType="int">
		select count(*) from office_day
		<where>
			<if test="officeId != null and officeId != ''"> and Office_Id = #{officeId} </if>
			<if test="name != null and name != ''"> and Name = #{name} </if>
			<if test="officeDay != null and officeDay != ''"> and Office_Day = #{officeDay} </if>
			<if test="startWork != null"> and `Start_Work` = #{startWork}</if>
			<if test="endWork != null"> and `End_Work` = #{endWork}</if>
		</where>
	</select>


	<select id="count" resultType="int">
		select count(*) from holiday
		<where>
			<if test="holidayId != null and holidayId != ''"> and Holiday_Id = #{holidayId} </if>
			<if test="holidayName != null and holidayName != ''"> and Holiday_Name = #{holidayName} </if>
			<if test="startDay != null and startDay != ''"> and Start_Day = #{startDay} </if>
			<if test="endDay != null and endDay != ''"> and End_Day = #{endDay} </if>
			<if test="startWork != null"> and `Start_Work` = #{startWork}</if>
			<if test="endWork != null"> and `End_Work` = #{endWork}</if>
		</where>
	</select>

	<insert id="saveWorkDay" parameterType="com.bootdo.workDay.domain.WorkDayDO" useGeneratedKeys="true" keyProperty="workId">
		insert into work_day(Work_Day, Work_Year,Start_Work,End_Work)
		select rep_date, Rep_Year,Start_Work,End_Work from obj_date a
		where not EXISTS(select * from holiday where a.rep_date &gt;= Start_Day and a.rep_date &lt;= End_Day)
		and DAYOFWEEK(rep_date)!=1 and DAYOFWEEK(rep_date)!=7
		and rep_year= #{currentYear}
		UNION ALL
		SELECT Office_Day, SUBSTR(Office_Day,1,4),Start_Work,End_Work
		FROM office_day
	</insert>

	<insert id="saveHoliday" parameterType="com.bootdo.workDay.domain.WorkDayDO" useGeneratedKeys="true" keyProperty="holidayId">
		insert into holiday
		(
			`Holiday_Name`,
			`Start_Day`,
			`End_Day`,
			Start_Work,
			End_Work
		)
		values
		(
			#{holidayName},
			#{startDay},
			#{endDay},
			#{startWork},
			#{endWork}
		)
	</insert>

	<update id="update" parameterType="com.bootdo.workDay.domain.WorkDayDO">
		update holiday
		<set>
			<if test="holidayName != null">`Holiday_Name` = #{holidayName}, </if>
			<if test="startDay != null">`Start_Day` = #{startDay}, </if>
			<if test="endDay != null">`End_Day` = #{endDay},</if>
			<if test="startWork != null">`Start_Work` = #{startWork},</if>
			<if test="endWork != null">`End_Work` = #{endWork}</if>
		</set>
		where Holiday_Id = #{holidayId}
	</update>

	<insert id="saveOfficeDay" parameterType="com.bootdo.workDay.domain.WorkDayDO" useGeneratedKeys="true" keyProperty="officeId">
		insert into office_day
		(
			`Name`,
			`Office_Day`,
			Start_Work,
			End_Work
		)
		values
		(
			#{name},
			#{officeDay},
			#{startWork},
			#{endWork}
		)
	</insert>

	<update id="updateOfficeDay" parameterType="com.bootdo.workDay.domain.WorkDayDO">
		update office_day
		<set>
			<if test="name != null">`Name` = #{name}, </if>
			<if test="officeDay != null">`Office_Day` = #{officeDay},</if>
			<if test="startWork != null">`Start_Work` = #{startWork},</if>
			<if test="endWork != null">`End_Work` = #{endWork}</if>
		</set>
		where Office_Id = #{officeId}
	</update>

	<delete id="remove">
		delete from holiday where Holiday_Id = #{value}
	</delete>

	<delete id="batchRemove">
		delete from holiday where Holiday_Id in
		<foreach item="holidayId" collection="array" open="(" separator="," close=")">
			#{holidayId}
		</foreach>
	</delete>

	<delete id="removeOfficeDay">
		delete from office_day where Office_Id = #{value}
	</delete>

	<delete id="removeWorkDay" parameterType="com.bootdo.workDay.domain.WorkDayDO">
		delete from work_day where Work_Year = #{currentYear}
	</delete>

	<delete id="batchRemoveOfficeDay">
		delete from office_day where Office_Id in
		<foreach item="officeId" collection="array" open="(" separator="," close=")">
			#{officeId}
		</foreach>
	</delete>

</mapper>
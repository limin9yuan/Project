<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bootdo.budget.dao.ExpensesDao">

	<select id="get" resultType="com.bootdo.budget.domain.ExpensesDO">
		select `Expenses_ID`,`Budget_ID`,`Expenses_Type`,`Expenses_Plan_Price`,`Expenses_Plan_Description`,`Expenses_Customer_Rate`,`Expenses_Project_Rate`,`Expenses_Remarks`,`Expenses_Operator`,`Expenses_Operate_TIme`,`Expenses_Total_Price` from budget_expenses where Expenses_ID = #{value}
	</select>

	<select id="list" resultType="com.bootdo.budget.domain.ExpensesDO">
		select `Expenses_ID`,`Budget_ID`,`Expenses_Type`,`Expenses_Plan_Price`,`Expenses_Plan_Description`,`Expenses_Customer_Rate`,`Expenses_Project_Rate`,`Expenses_Remarks`,`Expenses_Operator`,`Expenses_Operate_TIme`,`Expenses_Total_Price` from budget_expenses
        <where>  
		  		  <if test="expensesId != null and expensesId != ''"> and Expenses_ID = #{expensesId} </if>
		  		  <if test="budgetId != null and budgetId != ''"> and Budget_ID = #{budgetId} </if>
		  		  <if test="expensesType != null and expensesType != ''"> and Expenses_Type = #{expensesType} </if>
		  		  <if test="expensesPlanPrice != null and expensesPlanPrice != ''"> and Expenses_Plan_Price = #{expensesPlanPrice} </if>
		  		  <if test="expensesPlanDescription != null and expensesPlanDescription != ''"> and Expenses_Plan_Description = #{expensesPlanDescription} </if>
		  		  <if test="expensesCustomerRate != null and expensesCustomerRate != ''"> and Expenses_Customer_Rate = #{expensesCustomerRate} </if>
		  		  <if test="expensesProjectRate != null and expensesProjectRate != ''"> and Expenses_Project_Rate = #{expensesProjectRate} </if>
		  		  <if test="expensesRemarks != null and expensesRemarks != ''"> and Expenses_Remarks = #{expensesRemarks} </if>
		  		  <if test="expensesOperator != null and expensesOperator != ''"> and Expenses_Operator = #{expensesOperator} </if>
		  		  <if test="expensesOperateTime != null and expensesOperateTime != ''"> and Expenses_Operate_TIme = #{expensesOperateTime} </if>
		  		  <if test="expensesTotalPrice != null and expensesTotalPrice != ''"> and Expenses_Total_Price = #{expensesTotalPrice} </if>
		  		</where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
			<otherwise>
                order by Expenses_ID desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="count" resultType="int">
		select count(*) from budget_expenses
		 <where>  
		  		  <if test="expensesId != null and expensesId != ''"> and Expenses_ID = #{expensesId} </if>
		  		  <if test="budgetId != null and budgetId != ''"> and Budget_ID = #{budgetId} </if>
		  		  <if test="expensesType != null and expensesType != ''"> and Expenses_Type = #{expensesType} </if>
		  		  <if test="expensesPlanPrice != null and expensesPlanPrice != ''"> and Expenses_Plan_Price = #{expensesPlanPrice} </if>
		  		  <if test="expensesPlanDescription != null and expensesPlanDescription != ''"> and Expenses_Plan_Description = #{expensesPlanDescription} </if>
		  		  <if test="expensesCustomerRate != null and expensesCustomerRate != ''"> and Expenses_Customer_Rate = #{expensesCustomerRate} </if>
		  		  <if test="expensesProjectRate != null and expensesProjectRate != ''"> and Expenses_Project_Rate = #{expensesProjectRate} </if>
		  		  <if test="expensesRemarks != null and expensesRemarks != ''"> and Expenses_Remarks = #{expensesRemarks} </if>
		  		  <if test="expensesOperator != null and expensesOperator != ''"> and Expenses_Operator = #{expensesOperator} </if>
		  		  <if test="expensesOperateTime != null and expensesOperateTime != ''"> and Expenses_Operate_TIme = #{expensesOperateTime} </if>
		  		  <if test="expensesTotalPrice != null and expensesTotalPrice != ''"> and Expenses_Total_Price = #{expensesTotalPrice} </if>
		  		</where>
	</select>
	 
	<insert id="save" parameterType="com.bootdo.budget.domain.ExpensesDO">
		insert into budget_expenses
		(
			`Budget_ID`, 
			`Expenses_Type`, 
			`Expenses_Plan_Price`, 
			`Expenses_Plan_Description`, 
			`Expenses_Customer_Rate`, 
			`Expenses_Project_Rate`, 
			`Expenses_Remarks`, 
			`Expenses_Operator`, 
			`Expenses_Operate_TIme`,
			`Expenses_Total_Price`
		)
		values
		(
			#{budgetId}, 
			#{expensesType}, 
			#{expensesPlanPrice}, 
			#{expensesPlanDescription}, 
			#{expensesCustomerRate}, 
			#{expensesProjectRate}, 
			#{expensesRemarks}, 
			#{expensesOperator}, 
			#{expensesOperateTime},
			#{expensesTotalPrice}
		)
	</insert>
	 
	<update id="update" parameterType="com.bootdo.budget.domain.ExpensesDO">
		update budget_expenses 
		<set>
			<if test="budgetId != null">`Budget_ID` = #{budgetId}, </if>
			<if test="expensesType != null">`Expenses_Type` = #{expensesType}, </if>
			<if test="expensesPlanPrice != null">`Expenses_Plan_Price` = #{expensesPlanPrice}, </if>
			<if test="expensesPlanDescription != null">`Expenses_Plan_Description` = #{expensesPlanDescription}, </if>
			<if test="expensesCustomerRate != null">`Expenses_Customer_Rate` = #{expensesCustomerRate}, </if>
			<if test="expensesProjectRate != null">`Expenses_Project_Rate` = #{expensesProjectRate}, </if>
			<if test="expensesRemarks != null">`Expenses_Remarks` = #{expensesRemarks}, </if>
			<if test="expensesOperator != null">`Expenses_Operator` = #{expensesOperator}, </if>
			<if test="expensesOperateTime != null">`Expenses_Operate_TIme` = #{expensesOperateTime},</if>
			<if test="expensesTotalPrice != null">`Expenses_Total_Price` = #{expensesTotalPrice}</if>
		</set>
		where Expenses_ID = #{expensesId}
	</update>
	
	<update id="updateLaborSoftware" parameterType="com.bootdo.budget.domain.BudgetDO">
        update project_budget c inner join  
       (select c.Budget_ID,SUM(Labor_Total_Cost) as Budget_Labor_Cost,
        Budget_Service_Revenue*6 as Budget_Tax,
		Budget_Service_Revenue-Budget_Service_Revenue*6 as Budget_Service_Revenue_Net,
		Budget_Service_Revenue*6+SUM(Labor_Total_Cost)+SUM(Expenses_Total_Price)+SUM(Purchase_Total_Price) as Budget_Cost,
		Budget_Service_Revenue-(Budget_Service_Revenue*6+SUM(Labor_Total_Cost)+SUM(Expenses_Total_Price)+SUM(Purchase_Total_Price)) as Budget_Profit,
		Budget_Service_Revenue-Budget_Service_Revenue*Budget_Profit_Rate as Budget_Total_Cost
		from project_budget a
		left join budget_labor b on a.`Budget_ID`=b.`Budget_ID`
        left join budget_expenses c on a.`Budget_ID`=c.`Budget_ID`
        left join budget_purchase d on a.`Budget_ID`=d.`Budget_ID`
		where a.Budget_ID = #{value}) d
       set c.Budget_Labor_Cost =  d.Budget_Labor_Cost,
       c.Budget_Tax =  d.Budget_Tax,
       c.Budget_Service_Revenue_Net =  d.Budget_Service_Revenue_Net,
       c.Budget_Cost =  d.Budget_Cost,
       c.Budget_Profit =  d.Budget_Profit,
       c.Budget_Total_Cost =  d.Budget_Total_Cost
       where c.Budget_ID=d.Budget_ID
	</update>
	
	<update id="updateOldProject" parameterType="com.bootdo.budget.domain.BudgetDO">
		update project_budget c inner join  
       (select c.Budget_ID,SUM(Labor_Total_Cost) as Budget_Labor_Cost,
        SUM(Labor_Total_Cost)+SUM(Expenses_Total_Price)+SUM(Purchase_Total_Price) as Budget_Cost,
		Budget_Service_Revenue-Budget_Service_Revenue*Budget_Profit_Rate as Budget_Total_Cost
		from project_budget a
		left join budget_labor b on a.`Budget_ID`=b.`Budget_ID`
        left join budget_expenses c on a.`Budget_ID`=c.`Budget_ID`
        left join budget_purchase d on a.`Budget_ID`=d.`Budget_ID`
		where a.Budget_ID = #{value}) d
       set c.Budget_Labor_Cost =  d.Budget_Labor_Cost,
       c.Budget_Cost =  d.Budget_Cost,
       c.Budget_Total_Cost =  d.Budget_Total_Cost
       where c.Budget_ID=d.Budget_ID
	</update>
	
	<delete id="remove">
		delete from budget_expenses where Expenses_ID = #{value}
	</delete>
	
	<delete id="batchRemove">
		delete from budget_expenses where Expenses_ID in 
		<foreach item="expensesId" collection="array" open="(" separator="," close=")">
			#{expensesId}
		</foreach>
	</delete>

</mapper>
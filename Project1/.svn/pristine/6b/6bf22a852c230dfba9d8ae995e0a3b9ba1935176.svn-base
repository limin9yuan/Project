<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bootdo.budget.dao.LaborDao">

	<select id="getWorkTime" resultType="com.bootdo.budget.domain.LaborDO">
		SELECT Work_Day, Start_WorkAM, End_WorkPM
		FROM work_day
		WHERE Work_Day = #{dateNowStr}
	</select>

	<select id="calculateLaborHour" resultType="com.bootdo.budget.domain.LaborDO">
		select SUM(a.totalWorkTime) as totalWorkTime from (
		SELECT Work_Day,
		SUM(FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2))
		+SUM(FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)) as totalWorkTime
		FROM work_day
		WHERE Work_Day &gt; #{startDate} and Work_Day &lt; #{endDate}
		UNION
		SELECT Work_Day, CASE WHEN #{startTime} &lt;= Start_WorkAM
		then FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2)+
		FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{startTime} &gt;= Start_WorkAM and #{startTime} &lt;= End_WorkAM
		then FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{startTime})))/3600,2)+
		FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{startTime} &gt;= End_WorkAM and #{startTime} &lt;= Start_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{startTime} &gt;= Start_WorkPM and #{startTime} &lt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{startTime})))/3600,2)

		WHEN #{startTime} &gt;= End_WorkPM THEN 0
		ELSE 0 END
		FROM work_day
		WHERE Work_Day = #{startDate} and #{startDate} != #{endDate}

		UNION
		SELECT Work_Day, CASE WHEN #{endTime} &lt;= Start_WorkAM THEN 0
		WHEN #{endTime} &gt;= Start_WorkAM and #{endTime} &lt;= End_WorkAM
		then FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{endTime}))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2)

		WHEN #{endTime} &gt;= End_WorkAM and #{endTime} &lt;= Start_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2)

		WHEN #{endTime} &gt;= Start_WorkPM and #{endTime} &lt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2) +
		FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{endTime}))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{endTime} &gt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2)+
		FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		ELSE 0 END
		FROM work_day
		WHERE Work_Day = #{endDate} and #{startDate} != #{endDate}
		UNION
		SELECT Work_Day, CASE WHEN #{startTime} &lt;= Start_WorkAM and #{endTime} &lt;= Start_WorkAM
		and #{startTime} &lt;= #{endTime}  then 0

		WHEN #{startTime} &lt;=Start_WorkAM AND #{endTime} &gt;= Start_WorkAM AND #{endTime} &lt;= End_WorkAM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{endTime}))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2)

		WHEN #{startTime} &lt;= Start_WorkAM AND #{endTime} &gt;= End_WorkAM AND #{endTime} &lt;= Start_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2)

		WHEN #{startTime} &lt;= Start_WorkAM AND #{endTime} &gt;= Start_WorkPM AND #{endTime} &lt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2) +
		FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{endTime}))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{startTime} &lt;= Start_WorkAM AND #{endTime} &gt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkAM)))/3600,2) +
		FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{startTime} &gt;= Start_WorkAM and #{endTime} &lt;= End_WorkAM and #{startTime} &lt;=#{endTime}
		then FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{endTime}))-
		UNIX_TIMESTAMP(CONCAT(	Work_Day,' ',#{startTime})))/3600,2)

		WHEN #{startTime} &gt;= Start_WorkAM and #{startTime} &lt;= End_WorkAM  and
		#{endTime} &gt;= End_WorkAM and  #{endTime} &lt;= Start_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{startTime})))/3600,2)

		WHEN #{startTime} &gt;= Start_WorkAM and #{startTime} &lt;= End_WorkAM and
		#{endTime} &gt;= Start_WorkPM and #{endTime} &lt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{startTime})))/3600,2) +
		FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{endTime}))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{startTime} &gt;= Start_WorkAM and #{startTime} &lt;= End_WorkAM
		AND #{endTime} &gt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkAM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{startTime})))/3600,2) +
		FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{startTime} &gt;= End_WorkAM and #{startTime} &lt;= Start_WorkPM and
		#{endTime} &gt;= End_WorkAM and #{endTime} &lt;= Start_WorkPM and #{startTime} &lt;= #{endTime}  then 0

		WHEN #{startTime} &gt;= End_WorkAM and #{startTime} &lt;= Start_WorkPM AND
		#{endTime} &gt;= Start_WorkPM and #{endTime} &lt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{endTime}))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{startTime} &gt;= End_WorkAM and #{startTime} &lt;= Start_WorkPM
		AND #{endTime}  &gt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',Start_WorkPM)))/3600,2)

		WHEN #{startTime} &gt;= Start_WorkPM and #{startTime} &lt;= End_WorkPM
		and #{startTime} &lt;= #{endTime} and  #{endTime} &gt;= Start_WorkPM and #{endTime} &lt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{endTime}))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{startTime})))/3600,2)

		WHEN #{startTime} &gt;= Start_WorkPM and #{startTime} &lt;= End_WorkPM and
		#{endTime} &gt;= End_WorkPM
		THEN FORMAT((UNIX_TIMESTAMP(CONCAT(Work_Day,' ',End_WorkPM))-
		UNIX_TIMESTAMP(CONCAT(Work_Day,' ',#{startTime})))/3600,2)

		WHEN #{startTime} &gt;= End_WorkPM and #{endTime} &gt;= End_WorkPM and #{startTime} &lt;= #{endTime}  then 0
		ELSE 0 END
		FROM work_day
		WHERE Work_Day = #{startDate} and #{startDate} = #{endDate}) a

	</select>

	<select id="get" resultType="com.bootdo.budget.domain.LaborDO">
		select `Labor_ID`,`Budget_ID`,a.`Employee_ID`,
		date_format(Labor_Begin_Time,'%Y-%m-%d %h:%i') `Labor_Begin_Time`,
		date_format(Labor_End_Time,'%Y-%m-%d %h:%i') `Labor_End_Time`,
		`Labor_Total_Day_Num`,`Labor_Rate`,`Labor_Total_Hour_Num`,
        `Labor_Total_Cost`,`Labor_Remarks`,`Labor_Operator`,
        `Labor_Operate_TIme`,
        b.Employee_Salary_Hour,c.Job_Rank employee_Level
        from budget_labor a
        left join inner_org_employee b on a.`Employee_ID`=b.`Employee_ID`
        left join inner_org_job c on b.`Job_ID`=c.`Job_ID`
        where Labor_ID = #{value}
	</select>
	
	<select id="getLaborIds" resultType="com.bootdo.budget.domain.LaborDO">
		select * from budget_labor where Labor_ID in 
		<foreach item="laborId" collection="array" index="index" open="(" separator="," close=")">
			#{laborId}
		</foreach>
	</select>
	
	<select id="getEmployeeLevelSalary" resultType="com.bootdo.inner.domain.InnerOrgEmployeeDO">
		select Job_Rank employee_Level,Employee_Salary_Hour from inner_org_employee a
		left join inner_org_job b on a.Job_ID=b.Job_ID
		 where Employee_ID = #{value}
	</select>

	<select id="list" resultType="com.bootdo.budget.domain.LaborDO">
		select `Labor_ID`,`Budget_ID`,`Employee_ID`,
		DATE_FORMAT(Labor_Begin_Time,'%Y-%m-%d %h:%i')`Labor_Begin_Time`,
		DATE_FORMAT(Labor_End_Time,'%Y-%m-%d %h:%i')`Labor_End_Time`,
		`Labor_Total_Day_Num`,`Labor_Rate`,`Labor_Total_Hour_Num`,`Labor_Total_Cost`,
		`Labor_Remarks`,`Labor_Operator`,`Labor_Operate_TIme` from budget_labor
        <where>  
		  		  <if test="laborId != null and laborId != ''"> and Labor_ID = #{laborId} </if>
		  		  <if test="budgetId != null and budgetId != ''"> and Budget_ID = #{budgetId} </if>
		  		  <if test="employeeId != null and employeeId != ''"> and Employee_ID = #{employeeId} </if>
		  		  <if test="laborBeginTime != null and laborBeginTime != ''"> and Labor_Begin_Time = #{laborBeginTime} </if>
		  		  <if test="laborEndTime != null and laborEndTime != ''"> and Labor_End_Time = #{laborEndTime} </if>
		  		  <if test="laborTotalDayNum != null and laborTotalDayNum != ''"> and Labor_Total_Day_Num = #{laborTotalDayNum} </if>
		  		  <if test="laborRate != null and laborRate != ''"> and Labor_Rate = #{laborRate} </if>
		  		  <if test="laborTotalHourNum != null and laborTotalHourNum != ''"> and Labor_Total_Hour_Num = #{laborTotalHourNum} </if>
		  		  <if test="laborTotalCost != null and laborTotalCost != ''"> and Labor_Total_Cost = #{laborTotalCost} </if>
		  		  <if test="laborRemarks != null and laborRemarks != ''"> and Labor_Remarks = #{laborRemarks} </if>
		  		  <if test="laborOperator != null and laborOperator != ''"> and Labor_Operator = #{laborOperator} </if>
		  		  <if test="laborOperateTime != null and laborOperateTime != ''"> and Labor_Operate_TIme = #{laborOperateTime} </if>
		  		</where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
			<otherwise>
                order by Labor_ID desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="count" resultType="int">
		select count(*) from budget_labor
		 <where>  
		  		  <if test="laborId != null and laborId != ''"> and Labor_ID = #{laborId} </if>
		  		  <if test="budgetId != null and budgetId != ''"> and Budget_ID = #{budgetId} </if>
		  		  <if test="employeeId != null and employeeId != ''"> and Employee_ID = #{employeeId} </if>
		  		  <if test="laborBeginTime != null and laborBeginTime != ''"> and Labor_Begin_Time = #{laborBeginTime} </if>
		  		  <if test="laborEndTime != null and laborEndTime != ''"> and Labor_End_Time = #{laborEndTime} </if>
		  		  <if test="laborTotalDayNum != null and laborTotalDayNum != ''"> and Labor_Total_Day_Num = #{laborTotalDayNum} </if>
		  		  <if test="laborRate != null and laborRate != ''"> and Labor_Rate = #{laborRate} </if>
		  		  <if test="laborTotalHourNum != null and laborTotalHourNum != ''"> and Labor_Total_Hour_Num = #{laborTotalHourNum} </if>
		  		  <if test="laborTotalCost != null and laborTotalCost != ''"> and Labor_Total_Cost = #{laborTotalCost} </if>
		  		  <if test="laborRemarks != null and laborRemarks != ''"> and Labor_Remarks = #{laborRemarks} </if>
		  		  <if test="laborOperator != null and laborOperator != ''"> and Labor_Operator = #{laborOperator} </if>
		  		  <if test="laborOperateTime != null and laborOperateTime != ''"> and Labor_Operate_TIme = #{laborOperateTime} </if>
		  		</where>
	</select>
	 
	<insert id="save" parameterType="com.bootdo.budget.domain.LaborDO">
		insert into budget_labor
		(
			`Budget_ID`, 
			`Employee_ID`, 
			`Labor_Begin_Time`,
			`Labor_End_Time`, 
			`Labor_Total_Day_Num`, 
			`Labor_Rate`, 
			`Labor_Total_Hour_Num`, 
			`Labor_Total_Cost`, 
			`Labor_Remarks`, 
			`Labor_Operator`, 
			`Labor_Operate_TIme`
		)
		values
		(
			#{budgetId}, 
			#{employeeId}, 
			#{laborBeginTime},
			#{laborEndTime},
			#{laborTotalDayNum}, 
			#{laborRate}, 
			#{laborTotalHourNum}, 
			#{laborTotalCost}, 
			#{laborRemarks}, 
			#{laborOperator}, 
			#{laborOperateTime}
		)
	</insert>
	 
	<update id="update" parameterType="com.bootdo.budget.domain.LaborDO">
		update budget_labor 
		<set>
			<if test="budgetId != null">`Budget_ID` = #{budgetId}, </if>
			<if test="employeeId != null">`Employee_ID` = #{employeeId}, </if>
			<if test="laborBeginTime != null">`Labor_Begin_Time` = #{laborBeginTime}, </if>
			<if test="laborEndTime != null">`Labor_End_Time` = #{laborEndTime}, </if>
			<if test="laborTotalDayNum != null">`Labor_Total_Day_Num` = #{laborTotalDayNum}, </if>
			<if test="laborRate != null">`Labor_Rate` = #{laborRate}, </if>
			<if test="laborTotalHourNum != null">`Labor_Total_Hour_Num` = #{laborTotalHourNum}, </if>
			<if test="laborTotalCost != null">`Labor_Total_Cost` = #{laborTotalCost}, </if>
			<if test="laborRemarks != null">`Labor_Remarks` = #{laborRemarks}, </if>
			<if test="laborOperator != null">`Labor_Operator` = #{laborOperator}, </if>
			<if test="laborOperateTime != null">`Labor_Operate_TIme` = #{laborOperateTime}</if>
		</set>
		where Labor_ID = #{laborId}
	</update>
	
	<update id="updateLaborSoftware" parameterType="com.bootdo.budget.domain.BudgetDO">
        update project_budget c inner join  
       (select b.Budget_ID,IFNULL(SUM(Labor_Total_Cost),0) as Budget_Labor_Cost,
		Budget_Service_Revenue*6+ IFNULL(SUM(Labor_Total_Cost),0)+ IFNULL(SUM(Expenses_Total_Price),0)+ IFNULL(SUM(Purchase_Total_Price),0) as Budget_Cost,
		Budget_Service_Revenue-(Budget_Service_Revenue*6+IFNULL(SUM(Labor_Total_Cost),0)+IFNULL(SUM(Expenses_Total_Price),0)+IFNULL(SUM(Purchase_Total_Price),0)) as Budget_Profit
		from project_budget a
		left join budget_labor b on a.`Budget_ID`=b.`Budget_ID`
        left join budget_expenses c on a.`Budget_ID`=c.`Budget_ID`
        left join budget_purchase d on a.`Budget_ID`=d.`Budget_ID`
		where a.Budget_ID = #{budgetId}) d
       set c.Budget_Labor_Cost =  d.Budget_Labor_Cost,
       c.Budget_Cost =  d.Budget_Cost,
       c.Budget_Profit =  d.Budget_Profit
       where c.Budget_ID=d.Budget_ID
	</update>
	
	<update id="updateOldProject" parameterType="com.bootdo.budget.domain.BudgetDO">
		update project_budget c inner join  
       (select b.Budget_ID,IFNULL(SUM(Labor_Total_Cost),0) as Budget_Labor_Cost,
        IFNULL(SUM(Labor_Total_Cost),0)+IFNULL(SUM(Expenses_Total_Price),0)+IFNULL(SUM(Purchase_Total_Price),0) as Budget_Cost
		from project_budget a
		left join budget_labor b on a.`Budget_ID`=b.`Budget_ID`
        left join budget_expenses c on a.`Budget_ID`=c.`Budget_ID`
        left join budget_purchase d on a.`Budget_ID`=d.`Budget_ID`
		where a.Budget_ID = #{value}) d
       set c.Budget_Labor_Cost =  d.Budget_Labor_Cost,
       c.Budget_Cost =  d.Budget_Cost
       where c.Budget_ID=d.Budget_ID
	</update>
	
	<!--<update id="updateTotal" parameterType="com.bootdo.budget.domain.BudgetDO">
		update project_budget f inner join   
       (select a.Budget_ID,SUM(Labor_Total_Cost) as Budget_Labor_Cost,
		       SUM(Expenses_Total_Price) as Budget_Travel_Cost,
		       SUM(Purchase_Total_Price) as Budget_Purchase_Cost
		from project_budget a
		left join budget_labor b on a.`Budget_ID`=b.`Budget_ID`
        left join budget_expenses c on a.`Budget_ID`=c.`Budget_ID`
        left join budget_purchase d on a.`Budget_ID`=d.`Budget_ID`
		where a.Budget_ID = 12) g  
        set f.Budget_Labor_Cost =  g.Budget_Labor_Cost ,
        f.Budget_Travel_Cost =  g.Budget_Travel_Cost ,
        f.Budget_Purchase_Cost =  g.Budget_Purchase_Cost 
        where f.Budget_ID =  g.Budget_ID 
	</update>
	-->
	<delete id="remove">
		delete from budget_labor where Labor_ID = #{value}
	</delete>
	
	<delete id="batchRemove">
		delete from budget_labor where Labor_ID in 
		<foreach item="laborId" collection="array" open="(" separator="," close=")">
			#{laborId}
		</foreach>
	</delete>

</mapper>
package com.bootdo.contract.controller;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.bootdo.common.config.BootdoConfig;
import com.bootdo.common.controller.BaseController;
import com.bootdo.common.domain.DictDO;
import com.bootdo.common.domain.FileDO;
import com.bootdo.common.service.FileService;
import com.bootdo.common.utils.*;
import com.bootdo.contract.domain.ContractDeliveryDO;
import com.bootdo.contract.service.ContractDeliveryService;
import org.apache.catalina.servlet4preview.http.HttpServletRequest;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import org.springframework.web.multipart.MultipartFile;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

/**
 * 合同交付信息表
 *
 * @author chglee
 * @email 1992lcg@163.com
 * @date 2018-03-09 13:55:47
 */

@Controller
@RequestMapping("/contract/contractDelivery")
public class ContractDeliveryController extends BaseController {
	@Autowired
	private ContractDeliveryService contractDeliveryService;
	@Autowired
	private FileService sysFileService;
	@Autowired
	private BootdoConfig bootdoConfig;

    @GetMapping()
    @RequiresPermissions("contract:contract:contractDelivery")
    String ContractDelivery() {
        return "contract/contract/contractDelivery";
    }

    @ResponseBody
    @GetMapping("/list")
    @RequiresPermissions("contract:contract:contractDelivery")
    public PageUtils list(@RequestParam Map<String, Object> params) {
        // 查询列表数据
        Query query = new Query(params);
        List<ContractDeliveryDO> contractList = contractDeliveryService.list(query);
        int total = contractDeliveryService.count(query);
        PageUtils pageUtils = new PageUtils(contractList, total);
        return pageUtils;
    }

    @GetMapping("/addContractDelivery/{contractId}")
    @RequiresPermissions("contract:contract:addContractDelivery")
    String add(@PathVariable("contractId") String contractId, Model model) {
        model.addAttribute("contractId", contractId);
        return "contract/contract/addContractDelivery";
    }

    @GetMapping("/import")
    @RequiresPermissions("contract:contract:dataImport")
    String importFile() {
        return "contract/contract/import";
    }

    // edit数据绑定
    @RequestMapping("/edit_ajax/{deliveryId}")
    @ResponseBody
    Map<String, Object> edit_ajax(@PathVariable("deliveryId") String contractId) {
        ContractDeliveryDO contractDelivery = contractDeliveryService.get(contractId);
        Map<String, Object> returnData = new HashMap<String, Object>();
        returnData.put("contractDelivery", contractDelivery);
        return returnData;
    }

    @GetMapping("/edit/{contractId}")
    @RequiresPermissions("contract:contract:editDelivery")
    String edit(@PathVariable("contractId") String contractId, Model model) {
        model.addAttribute("contractId", contractId);
        return "contract/contract/editDelivery";
    }

    @GetMapping("/editContractDelivery/{deliveryId}")
    @RequiresPermissions("contract:contract:editContractDelivery")
    String editContractDelivery(@PathVariable("deliveryId") String deliveryId, Model model) {
        model.addAttribute("deliveryId", deliveryId);
        return "contract/contract/editContractDelivery";
    }

    /**
     * 保存
     */
    @ResponseBody
    @PostMapping("/save")
    @RequiresPermissions("contract:contract:addContractDelivery")
    public R save(ContractDeliveryDO contractDeliveryDO) {
        contractDeliveryDO.setDeliveryOperator(Long.toString(getUserId()));
         if (contractDeliveryService.save(contractDeliveryDO) > 0) {
            return R.ok();
        }
        return R.error();
    }

    /**
     * 修改
     */
    @ResponseBody
    @RequestMapping("/updateEditContractDelivery")
    @RequiresPermissions("contract:contract:EditContractDelivery")
    public R update(ContractDeliveryDO contractDeliveryDO) {
        contractDeliveryDO.setDeliveryOperator(Long.toString(getUserId()));
        contractDeliveryService.update(contractDeliveryDO);
        return R.ok();
    }

    /**
     * 删除
     */
    @PostMapping("/remove")
    @ResponseBody
    @RequiresPermissions("contract:contract:contractDeliveryRemove")
    public R remove(String deliveryId) {
        if (contractDeliveryService.remove(deliveryId) > 0) {
            return R.ok();
        }
        return R.error();
    }

    /**
     * 删除
     */
    @PostMapping("/batchRemove")
    @ResponseBody
    @RequiresPermissions("contract:contract:batchRemoveContractDelivery")
    public R remove(@RequestParam("ids[]") String[] deliveryId) {
        contractDeliveryService.batchRemove(deliveryId);
        return R.ok();
    }

    /**
     * 上传文件
     * @param file
     * @param request
     * @return
     */
    @ResponseBody
    @PostMapping("/upload")
    R upload(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
        String fileName = file.getOriginalFilename();
        fileName = FileUtil.renameToUUID(fileName);
        FileDO sysFile = new FileDO(FileType.fileType(fileName), "/files/" + fileName, new Date());
        try {
            FileUtil.uploadFile(file.getBytes(), bootdoConfig.getUploadPath(), fileName);
        } catch (Exception e) {
            return R.error();
        }
        if (sysFileService.save(sysFile) > 0) {
            return R.ok().put("fileName", sysFile.getUrl());
        }
        return null;
    }

    @ResponseBody
    @GetMapping("/listDic")
    public List<DictDO> listByType() {
        // 查询列表数据
        Map<String, Object> map = new HashMap<>(16);
        map.put("type", "");
        List<DictDO> dictList = contractDeliveryService.listDic();
        return dictList;
    }

    /**
     * 导入文件
     */
    @ResponseBody
    @PostMapping("/dataImport")
    R upload2(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
        String fileName = file.getOriginalFilename();
        fileName = FileUtil.renameToUUID(fileName);
        File datafile = null;
        try {
            FileUtil.uploadFile(file.getBytes(), bootdoConfig.getUploadPath(), fileName);
            datafile = new File(bootdoConfig.getUploadPath() + fileName);
        } catch (Exception e) {
            return R.error();
        }
        long userid = getUserId(); // log数据保存 用户id
        contractDeliveryService.dataImport(datafile, userid);
        return null;
    }

    /**
     * Export Microsoft Excel file.
     */
    @RequestMapping(value = "/export")
    public @ResponseBody void export(
            @RequestParam(value = "customerId", required = false) String contract_customerId,
            @RequestParam(value = "businessId", required = false) String contract_businessId,
            @RequestParam(value = "projectId", required = false) String contract_projectId,
            HttpServletResponse response, HttpServletRequest request) throws ParseException {
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("customerId", contract_customerId);
        params.put("businessId", contract_businessId);
        params.put("projectId", contract_projectId);
        List<ContractDeliveryDO> list = contractDeliveryService.getQuery(params);
        if (list.size() > 0) {
            System.out.println("---------------------list.size------------------->" + list.size());
            response.setContentType("application/binary;charset=UTF-8");
            try {
                ServletOutputStream out = response.getOutputStream();
                String fileName = new String((new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()).getBytes(),"UTF-8");
                response.setHeader("Content-disposition", "attachment; filename=" + fileName + ".xls");
                String[] titles = { "合同交付信息ID", "合同编号", "交付人", "交付时间", "交付内容", "合同状态", "操作人", "操作时间"};
                contractDeliveryService.export(titles, out, list);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

}

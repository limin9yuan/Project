package com.bootdo.contract.controller;

import com.bootdo.common.config.BootdoConfig;
import com.bootdo.common.controller.BaseController;
import com.bootdo.common.domain.DictDO;
import com.bootdo.common.domain.FileDO;
import com.bootdo.common.service.FileService;
import com.bootdo.common.utils.*;
import com.bootdo.contract.domain.ContractOperationDO;
import com.bootdo.contract.service.ContractOperationService;
import org.apache.catalina.servlet4preview.http.HttpServletRequest;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Mingyuan Li on 2018/3/6.
 * Package name: com.bootdo.contract.controller.
 * Project name: crm.
 */
@Controller
@RequestMapping("/contract/contractOperation")
public class ContractOperationController extends BaseController {

    @Autowired
    private ContractOperationService contractOperationService;

    @Autowired
    private FileService fileService;

    @Autowired
    private BootdoConfig bootdoConfig;

    @GetMapping()
    @RequiresPermissions("contract:contract:contractOperation")
    String ContractOperation(){
        return "contract/contract/contractOperation";
    }

    @ResponseBody
    @GetMapping("/list")
    @RequiresPermissions("contract:contract:contractOperation")
    public PageUtils list(@RequestParam Map<String, Object> params){
        // 查询列表数据
        Query query = new Query(params);
        List<ContractOperationDO> contractOperationList = contractOperationService.list(query);
        int total = contractOperationService.count(query);
        PageUtils pageUtils = new PageUtils(contractOperationList, total);
        return pageUtils;
    }

    @GetMapping("/add")
    @RequiresPermissions("contract:contract:addOperation")
    String add() {
        return "contract/contract/addOperation";
    }

    @GetMapping("/import")
    @RequiresPermissions("contract:contract:dataImportOperation")
    String importFile() {
        return "contract/contract/dataImportOperation";
    }

    // edit数据绑定
    @RequestMapping("/edit_ajax/{contractOperationId}")
    @ResponseBody
    Map<String, Object> edit_ajax(@PathVariable("contractOperationId") String contractOperationId) {
        ContractOperationDO contract = contractOperationService.get(contractOperationId);
        Map<String, Object> returnData = new HashMap<String, Object>();
        returnData.put("contractOperation", contract);
        return returnData;
    }

    @GetMapping("/edit/{contractOperationId}")
    @RequiresPermissions("contract:contract:editOperation")
    String edit(@PathVariable("contractOperationId") String contractOperationId, Model model){
        model.addAttribute("contractId", contractOperationId);
        return "contract/contract/editOperation";
    }

    /**
     * 保存
     */
    @ResponseBody
    @PostMapping("/save")
    @RequiresPermissions("contract:contract:addOperation")
    public R save(ContractOperationDO contractOperationDO){
        contractOperationDO.setContractId(getUserId());
        if (contractOperationService.save(contractOperationDO) > 0){
            return R.ok();
        }
        return R.error();
    }

    /**
     * 修改
     */
    @ResponseBody
    @RequestMapping("/update")
    @RequiresPermissions("contract:contract:editOperation")
    public R update(ContractOperationDO contractOperationDO){
        contractOperationDO.setContractId(getUserId());
        contractOperationService.update(contractOperationDO);
        return R.ok();
    }

    /**
     * 删除
     */
    @PostMapping("/remove")
    @ResponseBody
    @RequiresPermissions("contract:contract:removeOperation")
    public R remove(String contractOperationId){
        if (contractOperationService.remove(contractOperationId) > 0){
            return R.ok();
        }
        return R.error();
    }

    /**
     * 删除
     */
    @PostMapping("/OperationBatchRemove")
    @ResponseBody
    @RequiresPermissions("contract:contract:batchRemoveOperation")
    public R remove(@RequestParam("ids[]") String[] contractOperationIds){
        contractOperationService.batchRemove(contractOperationIds);
        return R.ok();
    }

    /**
     * 上传文件
     * @param file
     * @param request
     * @return
     */
    @ResponseBody
    @PostMapping("/upload")
    R upload(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
        String fileName = file.getOriginalFilename();
        fileName = FileUtil.renameToUUID(fileName);
        FileDO sysFile = new FileDO(FileType.fileType(fileName), "/files/" + fileName, new Date());
        try {
            FileUtil.uploadFile(file.getBytes(), bootdoConfig.getUploadPath(), fileName);
        } catch (Exception e) {
            return R.error();
        }
        if (fileService.save(sysFile) > 0) {
            return R.ok().put("fileName", sysFile.getUrl());
        }
        return null;
    }

    @ResponseBody
    @GetMapping("/listDic")
    public List<DictDO> listByType() {
        // 查询列表数据
        Map<String, Object> map = new HashMap<>(16);
        map.put("type", "");
        List<DictDO> dictList = contractOperationService.listDic();
        return dictList;
    }

    /**
     * 导入文件
     */
    @ResponseBody
    @PostMapping("/dataImport")
    R upload2(@RequestParam("file") MultipartFile file, HttpServletRequest request) {
        String fileName = file.getOriginalFilename();
        fileName = FileUtil.renameToUUID(fileName);
        File datafile = null;
        try {
            FileUtil.uploadFile(file.getBytes(), bootdoConfig.getUploadPath(), fileName);
            datafile = new File(bootdoConfig.getUploadPath() + fileName);
        } catch (Exception e) {
            return R.error();
        }
        long userid = getUserId(); // log数据保存 用户id
        contractOperationService.dataImport(datafile, userid);
        return null;
    }

    /**
     * Export Microsoft Excel file.
     */
    @RequestMapping(value = "/export")
    public @ResponseBody void export(
            @RequestParam(value = "customerId", required = false) String contract_customerId,
            @RequestParam(value = "businessId", required = false) String contract_businessId,
            @RequestParam(value = "projectId", required = false) String contract_projectId,
            HttpServletResponse response, HttpServletRequest request) throws ParseException {
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("customerId", contract_customerId);
        params.put("businessId", contract_businessId);
        params.put("projectId", contract_projectId);
        List<ContractOperationDO> list = contractOperationService.getQuery(params);
        if (list.size() > 0) {
            System.out.println("---------------------list.size------------------->" + list.size());
            response.setContentType("application/binary;charset=UTF-8");
            try {
                ServletOutputStream out = response.getOutputStream();
                String fileName = new String((new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()).getBytes(),"UTF-8");
                response.setHeader("Content-disposition", "attachment; filename=" + fileName + ".xls");
                String[] titles = { "合同编号", "企业客户编号", "业务编号", "合同名称", "申请人姓名", "建设单位", "合同种类", "合同总金额", "合同发起部门", "业务发起人","合同拟定人", "销售负责人", "提交评审时间", "关联合同编号", "发票类型", "预计开具发票时间", "硬件设备明细表", "软件功能列表", "项目经理", "合同信息备注", "附件","审批状态", "操作人", "操作时间", "項目编号"};
                contractOperationService.export(titles, out, list);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }





}

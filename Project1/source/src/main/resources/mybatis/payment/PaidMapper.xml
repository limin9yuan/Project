<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bootdo.payment.dao.PaidDao">

	<select id="get" resultType="com.bootdo.payment.domain.PaidDO">
		select `Paid_ID`,`Contract_ID`,`Purchase_ID`,`Contract_ID`,
		date_format(Paid_Time,'%Y-%m-%d') `Paid_Time`,
		`Paid_Price`,`Paid_Account_Number`,`Paid_Type`,`Paid_Status`,`Paid_Remarks`,`Paid_Operator`,`Paid_Operate_Time`,
		`Paid_Account_Price`,Paid_Ment_Type from payment_paid where Paid_ID = #{value}
	</select>

	<select id="list" resultType="com.bootdo.payment.domain.PaidDO">
		select DISTINCT `Paid_ID`,
		a.`Contract_ID`,d.`Employee_Name` as `Project_Owner_Name`,c.`Project_Name` as `Paid_Project_Name`,
		`Purchase_ID`,`Contract__D`,`Paid_Time`,`Paid_Price`,`Paid_Account_Number`,`Paid_Type`,
		CASE WHEN `Paid_Status` = '0' THEN '未开始'
		WHEN `Paid_Status` = '1' THEN '交付中' 
		WHEN `Paid_Status` = '2' THEN '已完成' 
		END AS `Paid_Status`,
		`Paid_Remarks`,`Paid_Operator`,`Paid_Operate_Time`,
		`Paid_Account_Price`,Paid_Ment_Type
		from payment_paid a
		left join contract b on a.`Contract_ID`=b.`Contract_ID`
        left join development_project c on b.`Project_ID`=c.`Project_ID`
        left join inner_org_employee d on d.`Employee_ID`=c.`Project_Owner`
        <where>  
        			<if test="paidOperator != null and paidOperator != ''"> and a.Paid_Operator=#{paidOperator}   or exists (select 1 from main_and_copy_person where Employee_ID = a.Paid_Operator and Table_Name='payment_paid')
																			or exists (select 1 from sys_user  where Identification=#{Identification} and user_id=#{paidOperator}) </if>
		  		  <if test="paidId != null and paidId != ''"> and Paid_ID = #{paidId} </if>
		  		  <if test="contractId != null and contractId != ''"> and Contract_ID = #{contractId} </if>
		  		  <if test="purchaseId != null and purchaseId != ''"> and Purchase_ID = #{purchaseId} </if>
		  		  <if test="contractD != null and contractD != ''"> and Contract__D = #{contractD} </if>
		  		  <if test="paidTime != null and paidTime != ''"> and Paid_Time = #{paidTime} </if>
		  		  <if test="paidPrice != null and paidPrice != ''"> and Paid_Price = #{paidPrice} </if>
		  		  <if test="paidAccountNumber != null and paidAccountNumber != ''"> and Paid_Account_Number = #{paidAccountNumber} </if>
		  		  <if test="paidType != null and paidType != ''"> and Paid_Type = #{paidType} </if>
		  		  <if test="paidStatus != null and paidStatus != ''"> and Paid_Status = #{paidStatus} </if>
		  		  <if test="paidRemarks != null and paidRemarks != ''"> and Paid_Remarks = #{paidRemarks} </if>
		  		  <if test="paidOperateTime != null and paidOperateTime != ''"> and Paid_Operate_Time = #{paidOperateTime} </if> 
		  		  <if test="paidAccountPrice != null and paidAccountPrice != ''"> and Paid_Account_Price = #{paidAccountPrice} </if> 
		  		  <if test="paidmentType != null and paidmentType != ''"> and Paid_Ment_Type = #{paidmentType} </if> 
		  		  
		  		  <if test="projectOwner != null and projectOwner != ''"> and d.`Employee_Name` LIKE #{projectOwner} </if>
		  		  <if test="projectId != null and projectId != ''"> and c.Project_ID = #{projectId} </if> 
		  		</where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
			<otherwise>
                order by Paid_ID desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="count" resultType="int">
		select count(DISTINCT `Paid_ID`) 
        from payment_paid a
		left join contract b on a.`Contract_ID`=b.`Contract_ID`
        left join development_project c on b.`Project_ID`=c.`Project_ID`
        left join inner_org_employee d on d.`Employee_ID`=c.`Project_Owner`
		 <where>  
				 <if test="paidOperator != null and paidOperator != ''"> and a.Paid_Operator=#{paidOperator}   or exists (select 1 from main_and_copy_person where Employee_ID = a.Paid_Operator and Table_Name='payment_paid')
																			or exists (select 1 from sys_user  where Identification=#{Identification} and user_id=#{paidOperator}) </if>
		  		  <if test="paidId != null and paidId != ''"> and Paid_ID = #{paidId} </if>
		  		  <if test="contractId != null and contractId != ''"> and Contract_ID = #{contractId} </if>
		  		  <if test="purchaseId != null and purchaseId != ''"> and Purchase_ID = #{purchaseId} </if>
		  		  <if test="contractD != null and contractD != ''"> and Contract__D = #{contractD} </if>
		  		  <if test="paidTime != null and paidTime != ''"> and Paid_Time = #{paidTime} </if>
		  		  <if test="paidPrice != null and paidPrice != ''"> and Paid_Price = #{paidPrice} </if>
		  		  <if test="paidAccountNumber != null and paidAccountNumber != ''"> and Paid_Account_Number = #{paidAccountNumber} </if>
		  		  <if test="paidType != null and paidType != ''"> and Paid_Type = #{paidType} </if>
		  		  <if test="paidStatus != null and paidStatus != ''"> and Paid_Status = #{paidStatus} </if>
		  		  <if test="paidRemarks != null and paidRemarks != ''"> and Paid_Remarks = #{paidRemarks} </if>
		  		  <if test="paidOperateTime != null and paidOperateTime != ''"> and Paid_Operate_Time = #{paidOperateTime} </if> 
		  		  <if test="paidAccountPrice != null and paidAccountPrice != ''"> and Paid_Account_Price = #{paidAccountPrice} </if> 
		  		  <if test="paidmentType != null and paidmentType != ''"> and Paid_Ment_Type = #{paidmentType} </if> 
		  		   
		  		  <if test="projectOwner != null and projectOwner != ''"> and d.`Employee_Name` LIKE #{projectOwner} </if>
		  		  <if test="projectId != null and projectId != ''"> and c.Project_ID = #{projectId} </if> 
		  		</where>
	</select>
	 
	<insert id="save" parameterType="com.bootdo.payment.domain.PaidDO">
		insert into payment_paid
		(
			`Paid_ID`, 
			`Contract_ID`, 
			`Purchase_ID`, 
			`Contract__D`, 
			`Paid_Time`, 
			`Paid_Price`, 
			`Paid_Account_Number`, 
			`Paid_Type`, 
			`Paid_Status`, 
			`Paid_Remarks`, 
			`Paid_Operator`, 
			`Paid_Operate_Time`,
			`Paid_Account_Price`,
			`Paid_Ment_Type`
		)
		values
		(
			#{paidId}, 
			#{contractId}, 
			#{purchaseId}, 
			#{contractD}, 
			#{paidTime}, 			
			#{paidPrice}, 
			#{paidAccountNumber}, 
			#{paidType}, 
			#{paidStatus}, 
			#{paidRemarks}, 
			#{paidOperator}, 
			#{paidOperateTime},
			#{paidAccountPrice},
			#{paidmentType}
		)
	</insert>
	 
	<update id="update" parameterType="com.bootdo.payment.domain.PaidDO">
		update payment_paid 
		<set>
			<if test="contractId != null">`Contract_ID` = #{contractId}, </if>
			<if test="purchaseId != null">`Purchase_ID` = #{purchaseId}, </if>
			<if test="contractD != null">`Contract__D` = #{contractD}, </if>
			<if test="paidTime != null">`Paid_Time` = #{paidTime}, </if>
			<if test="paidPrice != null">`Paid_Price` = #{paidPrice}, </if>
			<if test="paidAccountNumber != null">`Paid_Account_Number` = #{paidAccountNumber}, </if>
			<if test="paidType != null">`Paid_Type` = #{paidType}, </if>
			<if test="paidStatus != null">`Paid_Status` = #{paidStatus}, </if>
			<if test="paidRemarks != null">`Paid_Remarks` = #{paidRemarks}, </if>
			<if test="paidOperator != null">`Paid_Operator` = #{paidOperator}, </if>
			<if test="paidOperateTime != null">`Paid_Operate_Time` = #{paidOperateTime},</if>
			<if test="paidAccountPrice != null">`Paid_Account_Price` = #{paidAccountPrice},</if>
			<if test="paidmentType != null">`Paid_Ment_Type` = #{paidmentType}</if>
		</set>
		where Paid_ID = #{paidId}
	</update>
	
	<delete id="remove">
		delete from payment_paid where Paid_ID = #{value}
	</delete>
	
	<delete id="batchRemove">
		delete from payment_paid where Paid_ID in 
		<foreach item="paidId" collection="array" open="(" separator="," close=")">
			#{paidId}
		</foreach>
	</delete>

</mapper>